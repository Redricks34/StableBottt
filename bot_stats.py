from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hlink, link
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from aiogram.dispatcher.filters.state import StatesGroup, State
import json
import sqlite3
from sqlite_func_2 import *

api = "6448499765:AAH1TWiHnhNdwWknqswnD7KWGIcIMaRMsBw"

bot = Bot(token=api)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
admins_list = ("869834155", "914029246")


class Form(StatesGroup):
    update_gift_status = State()
    change_tokens = State()
    find_username_token = State()
    find_id_token = State()
    find_username_status = State()
    find_id_status = State()
    find_username = State()
    find_id = State()
    change_status = State()


# button start

user_button = InlineKeyboardMarkup()
id_button_user = InlineKeyboardButton(text="ID", callback_data="id_user_stats")
username_button_user = InlineKeyboardButton(text="USERNAME", callback_data="username_user_stats")
user_button.row(id_button_user, username_button_user)

tokens_button = InlineKeyboardMarkup()
id_tokens_button_user = InlineKeyboardButton(text="ID", callback_data="id_user_tokens")
username_tokens_button_user = InlineKeyboardButton(text="USERNAME", callback_data="username_user_tokens")
tokens_button.row(id_tokens_button_user, username_tokens_button_user)

status_button = InlineKeyboardMarkup()
id_status_button_user = InlineKeyboardButton(text="ID", callback_data="id_user_status")
username_status_button_user = InlineKeyboardButton(text="USERNAME", callback_data="username_user_status")
status_button.row(id_status_button_user, username_status_button_user)

tokens_change_markup = InlineKeyboardMarkup(row_width=1)
tokens_change_button = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—åüí∑", callback_data="change_tokens")
tokens_change_markup.add(tokens_change_button)

status_change_markup = InlineKeyboardMarkup(row_width=1)
status_change_button = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å", callback_data="change_simple_status")
status_hq_change_button = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å hquality —Å—Ç–∞—Ç—É—Å", callback_data="change_hq_status")
status_zoom_change_button = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å zoom —Å—Ç–∞—Ç—É—Å", callback_data="change_zoom_status")
status_change_markup.add(status_change_button, status_hq_change_button, status_zoom_change_button)

# button end


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.text == "/start":
        link_chanel = hlink("AlphaStable", "https://t.me/stablealpha")
        link_bot = hlink("AlphaStable", "https://t.me/alphastabletbot")
        await bot.send_message(message.from_user.id,
                               text=f"üñêÔ∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é.\n"
                                    f"–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ <b>{link_bot}</b>.\n"
                                    f"–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—à—å –∞–¥–º–∏–Ω–∞–º –∫–∞–Ω–∞–ª–∞ <i>{link_chanel}</i>.\n"
                                    f"–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –º–æ–∏—Ö —É–º–µ–Ω–∏—è—Ö, –ø—Ä–æ–ø–∏—à–∏—Ç–µ <i>/info</i>.", parse_mode="html",
                               disable_web_page_preview=True)


@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    link_group = hlink("—Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç", "https://t.me/+F5tR-Odqr_djZWEy")
    if str(message.from_user.id) not in admins_list:
        await bot.send_message(message.from_user.id, text="üõë –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞.")
    else:
        await message.delete()
        await bot.send_message(message.from_user.id, text="–ú–æ–∏ —É–º–µ–Ω–∏—èüìù\n"
                                                          "1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö üë§:\n"
                                                          "‚îî–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤\n"
                                                          "‚îî–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
                                                          "‚îî–û–±—â–µ–µ –∫–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –∫–æ–ª-–≤–æ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å(–æ–±–Ω—É–ª–µ–Ω–∏–µ –≤ 00:00) \n"
                                                          "‚îî–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
                                                          "‚îî–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –∏ —Ä–∞–∑–º–µ—Ä\n"
                                                          "‚îî–ì–∏—Ñ—Ç —Å—Ç–∞—Ç—É—Å\n"
                                                          "‚îî–ö–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
                                                          "‚îî–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                                                          "2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí∑\n"
                                                          "3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∏—Ñ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üéÅ\n"
                                                          "4. –û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚öôÔ∏è\n"
                                                          "5. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n"
                                                          "‚îî–û–±—â–µ–µ –∫–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n"
                                                          "‚îî–ö–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –¥–µ–Ω—å\n"
                                                          "‚îî–¢–æ–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏—Å—Ö–æ–¥—è –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n"
                                                          f"üîî–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω <b>{link_group}</b>, <i>—Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤</i>, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–æ–ø–∏—à–∏—Ç–µ <i>/notif</i>.\n"
                                                          "–î–ª—è –±–æ–ª—å—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è, –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é, –∞ —Ç–∞–∫–∂–µ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å <i>/help</i>.",
                               disable_web_page_preview=True, parse_mode="html")


@dp.message_handler(commands=['notif'])
async def notif(message: types.Message):
    link_bot = hlink("–±–æ—Ç–æ–º", "https://t.me/alphastabletbot")
    link_group = hlink("—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —á–∞—Ç–µ", "https://t.me/+F5tR-Odqr_djZWEy")
    if str(message.from_user.id) not in admins_list:
        await bot.send_message(message.chat.id, text="üõë –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞")
    else:
        await bot.send_message(message.chat.id, text=f"üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Å—ã–ª–∞–µ–º—ã–µ {link_bot} –≤ <b>{link_group}</b>\n"
                                                     "‚îî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ\n"
                                                     "‚îî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ(–∏ –∫—Ç–æ –ø—Ä–∏–≤—ë–ª)\n"
                                                     "‚îî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–æ–≤\n"
                                                     "‚îî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–∞—Ä–∫–∞, –∏ –æ–± –ø–æ–ª—É—á–µ–Ω–∏–∏(–∏ –∫—Ç–æ –ø–æ–ª—É—á–∏–ª)\n", parse_mode="html", disable_web_page_preview=True)


@dp.message_handler(commands=['help'])
async def help_(message: types.Message):
    if str(message.from_user.id) not in admins_list:
        await bot.send_message(message.chat.id, text="üõë –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞")
    else:
        await bot.send_message(message.chat.id, text="–ö–æ–º–∞–Ω–¥—ã:\n"
                                                     "<i>/user</i> –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
                                                     "<i>/tokens</i> –≤—ã–≤–æ–¥–∏—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å, —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
                                                     "<i>/gift</i> –æ–±–Ω—É–ª—è–µ—Ç –≥–∏—Ñ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                                     "<i>/status</i> –æ–±–Ω—É–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞–∏–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–º—É\n"
                                                     "<i>/all</i> –≤—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É(–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, —Ç—ã –∑–Ω–∞–µ—à—å –∫—É–¥–∞ –ø–∏—Å–∞—Ç—å)\n"
                                                     "<i>/day</i> –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –¥–µ–Ω—å\n"
                                                     "<i>/model</i> –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –º–æ–¥–µ–ª–µ–π", parse_mode="html")


@dp.message_handler()
async def commands_func(message: types.Message):
    if message.text == "/user":
        await bot.send_message(message.chat.id, text="–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:\n –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ\n<i>ID</i> –∏–ª–∏"
                                                     " <i>USERNAME</i>", parse_mode="html", reply_markup=user_button)
    elif message.text == "/tokens":
        await bot.send_message(message.chat.id, text="–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:\n –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ\n<i>ID</i> –∏–ª–∏"
                                                     " <i>USERNAME</i>", parse_mode="html", reply_markup=tokens_button)
    elif message.text == "/status":
        await bot.send_message(message.chat.id, text="–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:\n –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ\n<i>ID</i> –∏–ª–∏"
                                                     " <i>USERNAME</i>", parse_mode="html", reply_markup=status_button)

    elif message.text == "/gift":
        await bot.send_message(message.chat.id, text="–•–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≥–∏—Ñ—Ç —Å—Ç–∞—Ç—É—Å?\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–î–∞</b>."
                                                     "\n–õ—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–≤–æ–¥ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –æ—Ç–∫–∞–∑–æ–º.", parse_mode="html")
        await Form.update_gift_status.set()

    elif message.text == "/all":
        db_user = sqlite3.connect("userbase.db")
        # db_stats = sqlite3.connect("stats_user.db")
        cur_user = db_user.cursor()
        # cur_stats = db_stats.cursor()
        # cur_stats.execute("SELECT SUM(gen_all) FROM user_stats")
        # gen_all = cur_stats.fetchone()[0]
        # cur_stats.execute("SELECT SUM(gen_day) FROM user_stats")
        # gen_day = cur_stats.fetchone()[0]
        cur_user.execute("SELECT SUM(status) FROM users")
        gen_cur = cur_user.fetchone()[0]
        cur_user.execute("SELECT COUNT(*) FROM users")
        count_users = cur_user.fetchone()[0]
        cur_user.execute("SELECT SUM(gift_status) FROM users")
        gift_status_count = cur_user.fetchone()[0]
        db_user.close()
        # db_stats.close()
        await bot.send_message(message.chat.id, text=f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä</b>\n"
                                                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: <code>{'–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'}</code>\n"
                                                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –¥–µ–Ω—å: <code>{'–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'}</code>\n"
                                                     f"–õ—é–¥–µ–π –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <code>{gen_cur}/"
                                                     f"{count_users}</code>\n"
                                                     f"–õ—é–¥–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥:"
                                                     f" <code>{int(gift_status_count)}/{count_users}</code>", parse_mode="html")
    elif message.text == "/day":
        await bot.send_message(message.chat.id, text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif message.text == "/model":
        await bot.send_message(message.chat.id, text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif message.text == "/gen_day":
        # db_user = sqlite3.connect("stats_user.db")
        # cur_user = db_user.cursor()
        # cur_user.execute("UPDATE user_stats SET gen_day=0")
        # db_user.commit()
        # db_user.close()
        await bot.send_message(message.chat.id, text="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@dp.callback_query_handler()
async def callback_command(call: types.CallbackQuery, state: FSMContext):
    if call.data == "username_user_tokens":
        await call.message.delete()
        await bot.send_message(call.message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ <i>username</i> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ"
                                                          " —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", parse_mode="html")
        await Form.find_username_token.set()
    elif call.data == "id_user_tokens":
        await call.message.delete()
        await bot.send_message(call.message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ <i>id</i> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ"
                                                          " —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", parse_mode="html")
        await Form.find_id_token.set()
    elif call.data == "username_user_status":
        await call.message.delete()
        await bot.send_message(call.message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ <i>username</i> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ"
                                                          " —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", parse_mode="html")
        await Form.find_username_status.set()
    elif call.data == "id_user_status":
        await call.message.delete()
        await bot.send_message(call.message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ <i>id</i> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ"
                                                          " —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", parse_mode="html")
        await Form.find_id_status.set()
    elif call.data == "change_tokens":
        text = call.message.text.split()
        cur_tokens = text[text.index("–¢–æ–∫–µ–Ω—ã:") + 1]
        cur_id = text[text.index("ID:") + 1]
        cur_username = text[text.index("USERNAME:") + 1]
        await call.message.delete()
        await bot.send_message(call.message.chat.id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤\n"
                                                          f"–ü—Ä–æ—à–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {cur_tokens}")
        async with state.proxy() as a:
            a['cur_tokens'] = cur_tokens
            a['cur_id'] = cur_id
            a['cur_username'] = cur_username
        await Form.change_tokens.set()

    elif call.data in ("change_zoom_status", "change_simple_status", "change_hq_status"):
        data = {
            "change_simple_status": "simple",
            "change_zoom_status": "zoom",
            "change_hq_status": "hq"
        }
        cur_id = call.message.text.split()[call.message.text.split().index("ID:") + 1]
        async with state.proxy() as a:
            a['where_update'] = data[call.data]
            a["id_status_f"] = cur_id
        await call.message.delete()
        await bot.send_message(call.message.chat.id, text="–•–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å c—Ç–∞—Ç—É—Å"
                                                          " –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏?\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–î–∞</b>."
                                                          "\n–õ—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–≤–æ–¥ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –æ—Ç–∫–∞–∑–æ–º.",
                               parse_mode="html")
        await Form.change_status.set()
    elif call.data in ("username_user_stats", "id_user_stats"):
        if call.data == "username_user_stats":
            pass
        else:
            pass


@dp.message_handler(state=Form.find_username_token)
async def username_tokens(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['username_tokens'] = message.text
    answer = a["username_tokens"]
    bool_ = get_items_2("userbase", answer)
    if bool_[0]:
        items = bool_[1]
        tokens = items[2]
        id_user = items[0]
        await bot.send_message(message.chat.id, text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n"
                                                     f"<b>ID:</b> <code>{id_user}</code>\n"
                                                     f"<b>USERNAME:</b> @{answer}\n"
                                                     f"–¢–æ–∫–µ–Ω—ã: <code>{tokens}</code>\n"
                                                     f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.",
                               parse_mode="html", reply_markup=tokens_change_markup)
    else:
        await bot.send_message(message.chat.id, text=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{answer} –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="html")
    await state.finish()


@dp.message_handler(state=Form.find_id_token)
async def id_tokens(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['id_tokens'] = message.text
    answer = a["id_tokens"]
    if answer.isdigit():
        bool_ = get_items_2("userbase", answer, id_user=True)
        if bool_[0]:
            items = bool_[1]
            tokens = items[2]
            username_user = items[1]
            await bot.send_message(message.chat.id, text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n"
                                                         f"<b>ID:</b> <code>{answer}</code>\n"
                                                         f"<b>USERNAME:</b> @{username_user}\n"
                                                         f"–¢–æ–∫–µ–Ω—ã: <code>{tokens}</code>\n"
                                                         f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.",
                                   parse_mode="html", reply_markup=tokens_change_markup)
        else:
            await bot.send_message(message.chat.id, text=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{answer}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
                                   parse_mode="html")
    else:
        await bot.send_message(message.chat.id, text="<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ id.</b>", parse_mode="html")
    await state.finish()


@dp.message_handler(state=Form.find_username_status)
async def username_status(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['username_status'] = message.text
    answer = a["username_status"]
    bool_ = get_items_2("userbase", answer)
    if bool_[0]:
        items = bool_[1]
        status_code = items[3]
        status = "–ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç"
        if int(status_code):
            status = "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç"
        id_user = items[0]
        await bot.send_message(message.chat.id, text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n"
                                                     f"<b>ID:</b> <code>{id_user}</code>\n"
                                                     f"<b>USERNAME:</b> @{answer}\n"
                                                     f"–°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: <code>{status}</code>\n"
                                                     f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.",
                               parse_mode="html", reply_markup=status_change_markup)
    else:
        await bot.send_message(message.chat.id, text=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{answer} –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="html")
    await state.finish()


@dp.message_handler(state=Form.find_id_status)
async def id_status(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['id_status'] = message.text
    answer = a["id_status"]
    if answer.isdigit():
        bool_ = get_items_2("userbase", answer, id_user=True)
        if bool_[0]:
            items = bool_[1]
            status_code = items[3]
            status = "–ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç"
            if int(status_code):
                status = "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç"
            username_user = items[1]
            await bot.send_message(message.chat.id, text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n"
                                                         f"<b>ID:</b> <code>{answer}</code>\n"
                                                         f"<b>USERNAME:</b> @{username_user}\n"
                                                         f"–°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: <code>{status}</code>\n"
                                                         f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.",
                                   parse_mode="html", reply_markup=status_change_markup)
        else:
            await bot.send_message(message.chat.id, text=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{answer}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
                                   parse_mode="html")
    else:
        await bot.send_message(message.chat.id, text="<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ id.</b>", parse_mode="html")
    await state.finish()


@dp.message_handler(state=Form.update_gift_status)
async def gift_status_update(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['update_gift'] = message.text
    answer = a["update_gift"]
    if answer == "–î–∞":
        db_user = sqlite3.connect("userbase.db")
        cur_user = db_user.cursor()
        cur_user.execute("UPDATE users SET gift_status=0")
        db_user.commit()
        db_user.close()
        await bot.send_message(message.chat.id, text="<b>–ì–∏—Ñ—Ç —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>", parse_mode="html")
    else:
        await bot.send_message(message.chat.id, text="<b>–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>", parse_mode="html")
    await state.finish()


@dp.message_handler(state=Form.change_tokens)
async def tokens_change(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['new_tokens'] = message.text
    last_tokens = a["cur_tokens"]
    cur_id = a["cur_id"]
    cur_username = a["cur_username"]
    new_tokens = a['new_tokens']
    if new_tokens.isdigit():
        save_data_in_database_2("userbase", "balance", new_tokens, cur_id, True)
        await bot.send_message(message.chat.id, text=f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n"
                                                     f"<b>ID:</b> <code>{cur_id}</code>\n"
                                                     f"<b>USERNAME:</b> {cur_username}\n"
                                                     f"–¢–æ–∫–µ–Ω—ã: <code>{last_tokens}</code> -> <code>{new_tokens}</code>\n",
                               parse_mode="html")
    else:
        await bot.send_message(message.chat.id, text="<b>–í–≤–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>",
                               parse_mode="html")
    await state.finish()


@dp.message_handler(state=Form.change_status)
async def status_change(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['update_status'] = message.text
    where_update = a["where_update"]
    answer = a["update_status"]
    cur_id = a["id_status_f"]
    if answer == "–î–∞":
        if where_update == "simple":
            items = get_items_2("userbase", cur_id, True)[1]
            tokens = int(items[2]) + 10
            if str(items[3]) == "1":
                status = 0
                username = items[1]
                save_data_in_database_2("userbase", "balance", tokens, cur_id, True)
                save_data_in_database_2("userbase", "status", status, cur_id, True)
                await bot.send_message(message.chat.id, text=f"<b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n"
                                                             f"<b>ID:</b> <code>{cur_id}</code>\n"
                                                             f"<b>USERNAME:</b> @{username}\n"
                                                             f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç\n"
                                                             f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{items[2]}</code>-><code>{tokens}</code>"
                                       , parse_mode="html")
            else:
                await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç, –æ–±–Ω—É–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.")
        elif where_update == "zoom":
            items = get_items_2("userbase", cur_id, True)[1]
            tokens = int(items[2]) + 20
            if str(items[3]) == "1" and str(items[23]) == "1":
                status = 0
                username = items[1]
                save_data_in_database_2("userbase", "balance", tokens, cur_id, True)
                save_data_in_database_2("userbase", "status", status, cur_id, True)
                save_data_in_database_2("userbase", "zoom_status", status, cur_id, True)
                await bot.send_message(message.chat.id, text=f"<b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n"
                                                             f"<b>ID:</b> <code>{cur_id}</code>\n"
                                                             f"<b>USERNAME:</b> @{username}\n"
                                                             f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç\n"
                                                             f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{items[2]}</code>-><code>{tokens}</code>"
                                       , parse_mode="html")
            else:
                await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑—É–º, –æ–±–Ω—É–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.")
        elif where_update == "hq":
            items = get_items_2("userbase", cur_id, True)[1]
            tokens = int(items[2]) + 15
            if str(items[3]) == "1":
                status = 0
                username = items[1]
                save_data_in_database_2("userbase", "balance", tokens, cur_id, True)
                save_data_in_database_2("userbase", "status", status, cur_id, True)
                await bot.send_message(message.chat.id, text=f"<b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n"
                                                             f"<b>ID:</b> <code>{cur_id}</code>\n"
                                                             f"<b>USERNAME:</b> @{username}\n"
                                                             f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç\n"
                                                             f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{items[2]}</code>-><code>{tokens}</code>"
                                       , parse_mode="html")
            else:
                await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç, –æ–±–Ω—É–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.")
    else:
        await bot.send_message(message.chat.id, text="<b>–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>", parse_mode="html")
    await state.finish()



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
