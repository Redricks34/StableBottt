import datetime
import os
import random
import shutil
import sqlite3

import requests
from googletrans import Translator
from requests.auth import HTTPBasicAuth
import PIL
from aiogram.dispatcher.filters import Text
import logging
import re
import segno
from PIL import Image, ImageDraw, ImageOps, ImageFont, ImageFilter
import secrets
import string

from multiprocessing import Process

from PIL import Image, PngImagePlugin
import base64
import io
import emoji
import multiprocessing as mp
import requests as requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, callback_query, InputMedia, ContentType, ChatActions, CallbackQuery, \
    Message, WebAppInfo, InputFile
from aiogram.utils.exceptions import BotBlocked
from aiogram.utils.markdown import hlink, link

import asyncio

from webuiapi import webuiapi
from yoomoney import Quickpay
from yoomoney import Client
import openai
import json
import time as t
from utils import *
from sqlite_func import *

from upscale import upscaler
from generate_func import *

API_KEY = ""
openai.api_key = API_KEY

API_TOKEN = ""
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class BearerAuth(requests.auth.AuthBase):
    def __init__(self, token):
        self.token = token

    def __call__(self, r):
        r.headers["authorization"] = "Bearer " + self.token
        return r


class Form(StatesGroup):
    negative_wait = State()
    seed_state = State()
    amount_pay = State()
    casino = State()
    pose = State()
    text = State()
    qr_image = State()
    qr_text = State()
    zoom_prompt = State()
    clear = State()
    qr_hidden_text = State()
    gift_amount = State()
    add_prompt = State()


print('''                                                                      
 _____ __    _____ _____ _____    _____ _____ _____ _____ __    _____ 
|  _  |  |  |  _  |  |  |  _  |  |   __|_   _|  _  | __  |  |  |   __|
|     |  |__|   __|     |     |  |__   | | | |     | __ -|  |__|   __|
|__|__|_____|__|  |__|__|__|__|  |_____| |_| |__|__|_____|_____|_____|
                                                    POWERED BY R/R''')
CHANNEL_ID = '@stablealpha'
NOTSUB_MESSAGE = "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø—Ä–æ—Å—å–±–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª"


def overlay_images(image1_path, image2_path, output_path):
    # –û—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image1 = Image.open(image1_path).convert("RGBA")
    image2 = Image.open(image2_path).convert("RGBA").filter(ImageFilter.GaussianBlur(radius=10))
    # –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å–∫—É —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
    mask = Image.new("L", image1.size, 0)
    corner_radius = 20
    draw = ImageDraw.Draw(mask)
    draw.rounded_rectangle((0, 0, image1.width, image1.height), corner_radius, fill=255)

    # –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∞—Å–∫—É –∫ image1
    rounded_image = Image.new("RGBA", image1.size)
    rounded_image.paste(image1, (0, 0), mask)

    # –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è image1 –Ω–∞ image2 –ø–æ —Ü–µ–Ω—Ç—Ä—É
    x = (image2.width - rounded_image.width) // 2
    y = (image2.height - rounded_image.height) // 2

    # –ù–∞–ª–æ–∂–∏—Ç–µ image1 –Ω–∞ image2 –ø–æ —Ü–µ–Ω—Ç—Ä—É
    result = Image.new("RGBA", image2.size)
    result.paste(image2, (0, 0))
    result.paste(rounded_image, (x, y), mask=rounded_image)

    # –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
    text = "AlphaStable"
    font = ImageFont.truetype("arial.ttf", 26)
    text_width, text_height = font.getsize(text)

    # –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–º–∫–∏ –∏ –∑–∞–ª–∏–≤–∫–∏
    text_box_width = text_width + 20  # –î–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
    text_box_height = text_height + 20  # –î–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
    text_box = Image.new("RGBA", (text_box_width, text_box_height), (255, 255, 255, 128))

    # –ù–∞—Ä–∏—Å—É–π—Ç–µ —Ä–∞–º–∫—É –∏ –∑–∞–ª–∏–≤–∫—É –Ω–∞ text_box
    draw = ImageDraw.Draw(text_box)
    draw.rectangle([(0, 0), (text_box_width, text_box_height)], outline=(255, 255, 255), fill=(255, 255, 255))

    # –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ text_box
    text_x = (text_box_width - text_width) // 2
    text_y = text_box_height - text_height - 10  # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤–Ω–∏–∑—É

    # –ù–∞—Ä–∏—Å—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ text_box
    draw.text((text_x, text_y), text, font=font, fill=(0, 0, 0))

    # –ù–∞–ª–æ–∂–∏—Ç–µ text_box –Ω–∞ result

    result.paste(text_box, (round(image2.width / 2) - round(text_box_width / 2), image2.height - text_box_height - 10),
                 mask=text_box)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
    result.save(output_path, "PNG")


def crop_to_square(image_path, output_path):
    # Open the image
    image = Image.open(image_path).convert("RGBA")

    # Determine the size of the square
    size = min(image.size)

    # Calculate the coordinates to crop the image
    left = (image.width - size) // 2
    top = (image.height - size) // 2
    right = left + size
    bottom = top + size

    # Crop the image to the square
    cropped_image = image.crop((left, top, right, bottom))

    # Save the cropped image as PNG
    cropped_image.save(output_path, "PNG")


"""
def inter(promt, user_id):
    img_to_interrgate = Image.open(f'outs/{user_id}/{user_id}raw.jpg')
    res = interrgate(img_to_interrgate, user_id)

    save_data_in_database("promt", res, user_id)

    async def sendd():
        await bot.send_photo(chat_id=user_id, photo=open(f'outs/{user_id}/{user_id}raw.jpg', "rb"),
                             caption=f"**ü•≥ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ –≤ –∞–Ω–∏–º–µ!**\n\n –ü—Ä–æ—Å—Ç–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å**.\n\nü§ñ **Auto –ü—Ä–æ–º—Ç**: `{res}`",
                             reply_markup=propmt_markup_img, parse_mode='markdown')

    asyncio.run(sendd())
"""
"""
def start_upscale(user_id):
    upscaler(user_id)

    async def send_upscale():
        result1 = Image.open(f'outs/{user_id}/{user_id}-upscaled.png')
        width, height = result1.size
        await bot.send_document(user_id, open(f'outs/{user_id}/{user_id}-upscaled.png', "rb"),
                                caption=f"üîù* Upscaled 2x*\n{(str(width / 2)).replace('.0','')}x{(str(height/ 2)).replace('.0','')} < > {width}x{height}",
                                parse_mode='markdown')

    asyncio.run(send_upscale())
"""


def upscale_start(user_id, file_name):
    generate_upscale(user_id=user_id, file_name=file_name)

    async def send():
        await bot.send_document(user_id, open("outs" + f"\\{user_id}\\{user_id}upscaled" + 'rd.png', "rb"),
                                caption=f"*üî• SuperUpscaled 2x*\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —á–µ—Ä–µ–∑ Upscale. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–æ –≤ –¥–≤–∞ —Ä–∞–∑–∞.",
                                parse_mode='markdown')
        await bot.delete_message(chat_id=user_id, message_id=get_items(user_id)[26])

    asyncio.run(send())


def zoom_start(prompt, user_id, seed, zoom_scale, zoom_status):
    generate_zoom(prompt=prompt, user_id=user_id, seed=seed, zoom_scale=zoom_scale, zoom_status=zoom_status)

    async def send():
        await bot.send_document(user_id, open("outs" + f"\\{user_id}\\{user_id}zoom" + 'rd.png', "rb"),
                                caption=f"‚è∫ *ZOOM –≥–µ–Ω–µ—Ä–∞—Ü–∏—è*\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–æ, –≤–æ—Ç –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
                                parse_mode='markdown')
        await bot.delete_message(chat_id=user_id, message_id=get_items(user_id)[26])

    asyncio.run(send())


def generate(prompt, model, resol, user_id, style, hq=False, seed=-1, negative="", re_bool=False):
    ds = ready_txt2img(model=model, prompt=prompt, resol=resol, user_id=user_id, style=style, hq=hq,
                       seed=seed, negative=negative, re_bool=re_bool)

    async def send():
        db = sqlite3.connect('seeds.db')
        c = db.cursor()

        alphabet = string.ascii_letters + string.digits
        link = ''.join(secrets.choice(alphabet) for i in range(20))

        items = get_items(user_id)
        param = (link, ds['prompt'], items[10], ds['negative'], ds["model"], items[6])
        print(param)
        c.execute(f"INSERT INTO seeds VALUES (?, ?, ?, ?, ?, ?)", param)
        db.commit()
        db.close()

        import shutil
        shutil.copyfile("outs" + f"\\{user_id}\\{user_id}" + 'rd.png',
                        "outs" + f"\\{user_id}\\{user_id}" + f'rd{link}.png')
        # 2nd option

        text = replace_get_txt2img(model=ds['model'], prompt=ds['prompt'], negative=ds['negative'],
                                   resolution=ds['resol'], seed=ds['seed'], style=ds['style'],
                                   seed_link=link) + f"\n\nüí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ - *{items[2]} —Ç*"

        await bot.send_document(user_id, open("outs" + f"\\{user_id}\\{user_id}" + f'rd{link}.png', "rb"),
                                caption=text, parse_mode='markdown', reply_markup=write_history_to_art_markup)
        await bot.delete_message(chat_id=user_id, message_id=get_items(user_id)[26])


    asyncio.run(send())


def has_cyrillic(text):
    return bool(re.search('[–∞-—è–ê-–Ø]', text))


"""
def imgtoimg(prompt, user_id):

    i2i(prompt, user_id)

    async def send_i2i():
        if str(user_id) in get_all_user_id():
            await bot.send_message("–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")
        else:

            await bot.send_document(user_id, open("outs" + f"\\{user_id}\\{user_id}res.jpg", "rb"),
                                    caption=f"**–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:**\n\n–ø—Ä–æ–º—Ç: `{prompt}`\n\n*–ú—ã –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫ –≤–∞—à–µ–º—É –∞—Ä—Ç—É, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ*\n\n*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*",
                                    parse_mode='markdown', reply_markup=write_history_to_art_markup_only)

    asyncio.run(send_i2i())
"""

# --> BUTTON <-- #


propmt_markup = InlineKeyboardMarkup(row_width=2)
guide_button = InlineKeyboardButton(text="üìö –ì–∞–π–¥", url="https://telegra.ph/AlphaStable---polnoe-rukovodstvo-07-30")
stay_promt_previous = InlineKeyboardButton(text='üí¨ GPT edit', callback_data='stay_promt')
choose_model_button = InlineKeyboardButton(text='‚öôÔ∏è –ú–æ–¥–µ–ª—å', callback_data="choose_model")
choose_resolution_button = InlineKeyboardButton(text="‚¨úÔ∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ", callback_data="resolution")
choose_style_button = InlineKeyboardButton(text="‚ú® C—Ç–∏–ª—å", callback_data='style')
choose_seed_button = InlineKeyboardButton(text="üå± –°–∏–¥", callback_data='seed')
choose_pose_button = InlineKeyboardButton(text="üï∫ –†–µ—Ñ–µ—Ä–µ–Ω—Å", callback_data='ref_mode')
choose_negative_button = InlineKeyboardButton(text="‚ùå –ù–µ–≥–∞—Ç–∏–≤", callback_data='negative')
choose_streight_button = InlineKeyboardButton(text="üí™ –°–∏–ª–∞", callback_data='streight')
start_gen_button = InlineKeyboardButton(text="üí´ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ( 10—Ç )", callback_data="start_gen")
start_gen_img = InlineKeyboardButton(text="üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="start_gen_img")

propmt_markup.row(guide_button).row(choose_model_button, choose_resolution_button).row(choose_seed_button,
                                                                                       choose_negative_button,
                                                                                       choose_pose_button).row(
    start_gen_button)

propmt_markup_img = InlineKeyboardMarkup(row_width=1).row(choose_seed_button, choose_negative_button).add(
    choose_streight_button, start_gen_img)

change_style_markup = InlineKeyboardMarkup(row_width=3)
prev_style = InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='prev_style')
back_style = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='go_back')
next_style = InlineKeyboardButton('‚û°Ô∏èÔ∏è', callback_data='next_style')
change_style_markup.add(prev_style, back_style, next_style)

choose_streight_markup = InlineKeyboardMarkup(row_width=1)
very_low_str = InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data='1')
low_str = InlineKeyboardButton("–ù–∏–∑–∫–∞—è", callback_data='2')
classic_str = InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", callback_data='3')
high_str = InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data='4')
very_high_str = InlineKeyboardButton("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è", callback_data='5')
save_button_str = InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data="save_str")
choose_streight_markup.row(very_low_str, low_str).row(classic_str).row(high_str, very_high_str).row(save_button_str)

choose_model_markup = InlineKeyboardMarkup(row_width=2)
alpha_button = InlineKeyboardButton(text='Alpha', callback_data="Alpha")
beta_button = InlineKeyboardButton(text='Beta', callback_data='Beta')
gamma_button = InlineKeyboardButton(text='Gamma', callback_data='Gamma')
zeta_button = InlineKeyboardButton(text='Zeta', callback_data='Zeta')
lamda_button = InlineKeyboardButton(text='Lamda', callback_data='Lamda')
pi_button = InlineKeyboardButton(text='Pi', callback_data='Pi')
yota_button = InlineKeyboardButton(text="Yota", callback_data='Yota')
omega_button = InlineKeyboardButton(text='Omega', callback_data='Omega')
omicron_button = InlineKeyboardButton(text="Omicron", callback_data='Omicron')
delta_button = InlineKeyboardButton(text='Delta', callback_data='Delta')
sigma_button = InlineKeyboardButton(text="Sigma", callback_data="Sigma")
epsilon_button = InlineKeyboardButton(text="Epsilon", callback_data='Epsilon')
universe_button = InlineKeyboardButton(text="Universe", callback_data="Universe")
sdxl_button = InlineKeyboardButton(text="Omega XL", callback_data="omegaxl")
save_model_button = InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='save_model_button')
choose_model_markup.row(alpha_button, gamma_button, beta_button).row(omega_button, pi_button).row(yota_button).row(
    omicron_button, universe_button).row(save_model_button)

choose_model_alpha_markup = InlineKeyboardMarkup(row_width=3)
dark_alpha_button = InlineKeyboardButton(text='Dark Alpha', callback_data="Dark Alpha")
alpha225d_button = InlineKeyboardButton(text='3D Alpha', callback_data="3DAlpha")
light_alpha_button = InlineKeyboardButton(text='Light Alpha', callback_data="Light Alpha")
back_button = InlineKeyboardButton(text='<< –ù–∞–∑–∞–¥', callback_data="back_button")
choose_model_alpha_markup.row(alpha225d_button, dark_alpha_button).row(
    save_model_button).row(back_button)

choose_resolution_markup = InlineKeyboardMarkup(row_width=2)
one_to_one_button = InlineKeyboardButton(text="1:1", callback_data="1:1")

s_to_n_button = InlineKeyboardButton(text="3:2", callback_data="3:2")
n_to_s_button = InlineKeyboardButton(text="2:3", callback_data="2:3")
res_16_button = InlineKeyboardButton(text="16:9", callback_data="16:9")
res_9_button = InlineKeyboardButton(text="9:16", callback_data="9:16")
t_to_o_button = InlineKeyboardButton(text="2:1", callback_data="2:1")
resol_button = InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='save_resol_button')
choose_resolution_markup.row(one_to_one_button).row(s_to_n_button, n_to_s_button).row(res_16_button, res_9_button).row(
    t_to_o_button).row(resol_button)

get_generation_markup = InlineKeyboardMarkup(row_width=1)
get_generation_button = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="get_get")
get_generation_markup.add(get_generation_button)

styles_markup = InlineKeyboardMarkup(row_width=5)
magazine_style = InlineKeyboardButton(text="–ñ—É—Ä–Ω–∞–ª", callback_data="magazine")
popfigure_style = InlineKeyboardButton(text="–§–∏–≥—É—Ä–∫–∞", callback_data="pop figure")
bodyhorror_style = InlineKeyboardButton(text="–•–æ—Ä—Ä–æ—Ä", callback_data="body horror")
invisivle_style = InlineKeyboardButton(text="No body", callback_data="invisible")
ragemode_style = InlineKeyboardButton(text="–Ø—Ä–æ—Å—Ç—å", callback_data="ragemode_chooser")
pixel_style = InlineKeyboardButton(text="–ü–∏–∫—Å–µ–ª—å", callback_data="pixel")
tdrm_style = InlineKeyboardButton(text="3D —Ä–µ–Ω–¥–µ—Ä", callback_data="3drm")
manga_style = InlineKeyboardButton(text="–ú–∞–Ω–≥–∞", callback_data="manga")
Niji_style = InlineKeyboardButton(text="Niji", callback_data="niji")
pastel_style = InlineKeyboardButton(text="Pastel", callback_data="pastel")
concept_style = InlineKeyboardButton(text='Concept', callback_data="concept")
nn_style = InlineKeyboardButton(text='1990', callback_data='1990s')

rage_markup = InlineKeyboardMarkup(row_width=2)
rage_old = InlineKeyboardButton(text="Rage old", callback_data="rageold")
rage_new = InlineKeyboardButton(text="Rage new", callback_data="ragenew")
save_button = InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_style")
rage_markup.add(rage_old, rage_new)
no_style = InlineKeyboardButton(text="–ë–µ–∑ —Å—Ç–∏–ª—è", callback_data="no_style")

styles_markup.row(magazine_style, popfigure_style, bodyhorror_style).row(invisivle_style, ragemode_style, pixel_style,
                                                                         nn_style).row(tdrm_style, manga_style,
                                                                                       Niji_style, concept_style).row(
    pastel_style).row(no_style).row(save_button)

alphashare_contin_markup = InlineKeyboardMarkup(row_width=1)
alphashare_contin_markup_2 = InlineKeyboardMarkup(row_width=1)
like_button = InlineKeyboardButton(text="‚ù§Ô∏è (+3 –∞–≤—Ç–æ—Ä—É)", callback_data='like')
cont_button = InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="cont_button")
alphashare_contin_markup.add(like_button, cont_button)
alphashare_contin_markup_2.add(cont_button)

write_history_to_art_markup = InlineKeyboardMarkup(row_width=2)
write_history_to_art_markup_2 = InlineKeyboardMarkup(row_width=2)
write_history_to_art_markup_3 = InlineKeyboardMarkup(row_width=2)
write_history_to_art_markup_4 = InlineKeyboardMarkup(row_width=2)

write_history_to_art_btn = InlineKeyboardButton(text="üìñ –ù–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫ –∞—Ä—Ç—É", callback_data="write_history")
restart_gen_button = InlineKeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å (10—Ç)", callback_data="restart_gen")
hq_and_su_button = InlineKeyboardButton(text="üî• –£–ª—É—á—à–∏—Ç—å", callback_data="make_better")
upscaleee_gen_button = InlineKeyboardButton(text="üî•Ô∏è SuperUpscale ( 20—Ç )", callback_data="upscale")
zoom_button = InlineKeyboardButton(text="‚è∫ Zoom (20—Ç)", callback_data='zoom')
upscale_gen_button = InlineKeyboardButton(text="üîùÔ∏è HQuality ( 15—Ç )", callback_data="hquality")
edit_gen_button = InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_res")
alphashare_button = InlineKeyboardButton(text="üîñ –í—ã–ª–æ–∂–∏—Ç—å", callback_data="ashare")

hq_and_su_markup = InlineKeyboardMarkup(row_width=2)
back_hq_and_su_button = InlineKeyboardButton(text="<< –û—Ç–º–µ–Ω–∞", callback_data="back_hqandsu")
hq_and_su_markup.add(upscaleee_gen_button, upscale_gen_button).row(zoom_button).row(back_hq_and_su_button)

write_history_to_art_markup.row(hq_and_su_button).row(edit_gen_button, restart_gen_button).row(alphashare_button)
write_history_to_art_markup_2.row(hq_and_su_button).row(edit_gen_button, restart_gen_button)

write_history_to_art_markup_3.row(restart_gen_button, edit_gen_button).row(alphashare_button)
write_history_to_art_markup_4.row(restart_gen_button, edit_gen_button).row(restart_gen_button)
write_history_to_art_markup_only = InlineKeyboardMarkup(row_width=1)

write_history_to_art_btn = InlineKeyboardButton(text="üìñ –ù–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫ –∞—Ä—Ç—É", callback_data="write_history")
write_history_to_art_markup_only.add(write_history_to_art_btn)

cancel_markup = InlineKeyboardMarkup(row_width=1)
cancel_button = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")
cancel_markup.add(cancel_button)

keyboard_ashare = InlineKeyboardMarkup(row_width=1)
button_1 = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="check_gen")
keyboard_ashare.add(button_1)

keyboard_ashare2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
ashare_button = types.KeyboardButton(text="AlphaShare")
persons_button = KeyboardButton(text="–ü–µ—Ä—Å–æ–Ω–∞–∂–∏", web_app=WebAppInfo(url='https://innoky.github.io/–ü–µ—Ä—Å–æ–Ω–∞–∂–∏.html'))
keyboard_ashare2.add(ashare_button, persons_button)
choose_amount_markup = InlineKeyboardMarkup(row_width=2)
tf_button = InlineKeyboardButton(text="50—Ç - 25‚ÇΩ", callback_data='tf_button')
f_button = InlineKeyboardButton(text="100—Ç - 49‚ÇΩ", callback_data='f_button')
nf_button = InlineKeyboardButton(text="üî• 200—Ç - 90‚ÇΩ", callback_data='nf_button')
ohf_button = InlineKeyboardButton(text="300—Ç - 149‚ÇΩ", callback_data='ohf_button')
choose_amount_pers = InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data='set_amount')
choose_amount_markup.add(tf_button, f_button, nf_button, ohf_button).row(choose_amount_pers)

back_balance_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="back_balance_button")

casino_markup = InlineKeyboardMarkup(row_width=1)
play_button = InlineKeyboardButton(text="–°—ã–≥—Ä–∞—Ç—å", callback_data="play_casino")
back_casino = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="back_casino")

casino_markup.add(play_button, back_casino)

channel_sub_markup = InlineKeyboardMarkup(row_width=1)
channel_sub_button = InlineKeyboardButton(text="–ö–∞–Ω–∞–ª AlphaStable", url="https://t.me/stablealpha")
channel_sub_markup.add(channel_sub_button)


# --> END BUTTON <-- #


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if "alphagift" in message.text:
        db = sqlite3.connect('userbase.db')
        c = db.cursor()
        c.execute("SELECT * FROM users")
        items = c.fetchall()
        existence = bool

        for i in range(len(items)):
            if str(items[i][0]) == str(message.from_user.id):
                existence = True
                break
        if existence == False:
            await bot.send_message(message.chat.id,
                                   "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")
        else:
            if items[i][9] == 1:
                await bot.send_message(message.chat.id,
                                       "ü•∞ –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥)"
                                       " –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π, —Å–ª–µ–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!",
                                       reply_markup=keyboard_ashare2)
            else:
                await bot.send_message(message.chat.id,
                                       "ü•∞ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ"
                                       " –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ú—ã –±–µ–∑—É–º–Ω–æ —Ä–∞–¥—ã"
                                       " —á—Ç–æ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º. –ñ–µ–ª–∞–µ–º"
                                       " —É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!\n\n<code>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ: +40 —Ç–æ–∫–µ–Ω–æ–≤</code>",
                                       parse_mode="html", reply_markup=keyboard_ashare2)
                save_data_in_database("gift_status", "1", message.from_user.id)
                save_data_in_database("balance", items[i][2] + 40, message.from_user.id)
    if "edit_prompt" in message.text:
        print("test")
        worker_msg = message.text.replace("/start ", "")
        items = get_items(message.from_user.id)
        cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
        cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="cancel_neg")
        cancel_neg_markdown.add(cancel_neg_button)
        mss = await bot.send_message(message.chat.id,
                                     f"üé® *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫ —Å—Ç–∞—Ä–æ–º—É*\n–û–Ω –¥–æ–±–∞–≤–∏—Ç—Å—è –∫ –∫–æ–Ω—Ü—É —Å—Ç–∞—Ä–æ–≥–æ –≤–≤–æ–¥–∞.\n\n–°—Ç–∞—Ä—ã–π –≤–≤–æ–¥: `{items[7]}`",
                                     parse_mode="markdown", reply_markup=cancel_neg_markdown)

        async with state.proxy() as data:
            data["edit_id"] = mss.message_id
        await Form.add_prompt.set()
    if "rd" in message.text:

        db = sqlite3.connect('userbase.db')
        c = db.cursor()
        c.execute(f"SELECT id FROM users")
        db.commit()
        items = c.fetchall()
        db.close()
        exist = 0
        for i in range(len(items)):
            if str(items[i]).replace("('", "").replace("',)", "") == str(message.from_user.id):
                exist = 1
        if exist == 0:
            await bot.send_message(chat_id=message.from_user.id,
                                   text="*–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.*\n\n–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start",
                                   parse_mode="markdown")
        else:
            worker_text = message.text.replace("/start ", "")
            id = worker_text.split("rd")[0]

            db = sqlite3.connect('gift.db')
            c = db.cursor()
            c.execute(f"SELECT * FROM gift")
            db.commit()
            itemss = c.fetchall()
            db.close()
            status_of_gift = 0
            for i in range(len(itemss)):
                if itemss[i][0].replace("('", "").replace("',)", "") == id:
                    amount = itemss[i][1]
                    gifter = itemss[i][3]
                    getter = itemss[i][4]
                    break

            if itemss[i][2] == 1:
                status_of_gift = 1

            if status_of_gift == 0:
                if str(gifter) == str(message.from_user.id):
                    await bot.send_message(chat_id=message.from_user.id,
                                           text=f"üò¢ –ü–æ—Ö–æ–∂–µ —ç—Ç–æ –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫. –í—ã –µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –º–æ–∂–µ—Ç–µ.",
                                           parse_mode="markdown")
                else:
                    if message.from_user.username != getter and getter != "empty":
                        await bot.send_message(chat_id=message.from_user.id,
                                               text=f"üò¢ –ü–æ—Ö–æ–∂–µ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –¥–ª—è –≤–∞—Å",
                                               parse_mode="markdown")
                    else:
                        item = get_items(message.from_user.id)
                        balance = item[2]
                        save_data_in_database("balance", balance + int(amount), message.from_user.id)

                        db = sqlite3.connect("gift.db")
                        cur = db.cursor()
                        sql_update_query = f'''UPDATE gift SET status = ? WHERE gift_link = ?'''
                        data_b = (1, id)
                        cur.execute(sql_update_query, data_b)
                        db.commit()
                        db.close()

                        itemsz = get_items(gifter)
                        save_data_in_database("balance", int(itemsz[2]) - int(amount), int(gifter))
                        await bot.send_message(chat_id=message.from_user.id,
                                               text=f"üéÅ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ {amount} —Ç–æ–∫–µ–Ω(–æ–≤)*",
                                               parse_mode="markdown")
            else:
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"üò¢ *–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω*", parse_mode="markdown")

    if len(message.text.replace("/start ", "")) == 20:
        db = sqlite3.connect('seeds.db')
        c = db.cursor()
        c.execute(f"SELECT * FROM seeds")
        db.commit()
        items = c.fetchall()
        db.close()
        print(message.text)
        for i in range(len(items)):
            print(items[i][0])
            if str(items[i][0]) == message.text.replace('/start ', ''):
                data = items[i]
                break

        save_data_in_database('pose_status', 0, message.from_user.id)
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        items = get_items(message.from_user.id)

        cur_model = data[4]
        cur_resol = data[5]

        save_data_in_database("raw_promt", data[1], message.from_user.id)
        save_data_in_database("promt", data[1], message.from_user.id)

        text = link('–ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
        # await bot.send_photo(message.chat.id, photo="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
        #                      caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n\n`{message.text}`\n\n- {text}\n\n*–°–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT edit –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{cur_model}**\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: **{cur_resol}**""",
        #                      reply_to_message_id=message.message_id,
        #                      parse_mode='markdown', reply_markup=propmt_markup)
        items = get_items(message.from_user.id)
        rp2 = ReplyKeyboardMarkup(resize_keyboard=True)
        rp2_button = KeyboardButton(text="–°—Ç–∏–ª–∏", web_app=WebAppInfo(url='https://innoky.github.io/#'))
        button_1 = types.KeyboardButton(text="AlphaShare")
        rp2.add(button_1, rp2_button)

        await bot.send_message(message.from_user.id, f"*‚öôÔ∏è –ü—Ä–æ–º—Ç:* `{items[7]}`",
                               disable_web_page_preview=True, reply_markup=rp2, parse_mode='markdown')
        await bot.send_message(message.chat.id, text=replace_description_txt2img(model=cur_model,
                                                                                 prompt=data[1],
                                                                                 resolution=cur_resol,
                                                                                 negative=data[3],
                                                                                 seed=data[2], ),
                               reply_to_message_id=message.message_id, parse_mode='markdown',
                               reply_markup=propmt_markup, disable_web_page_preview=True)

    elif message.text == '/start' or (" " in message.text and message.text.split()[1].isdigit()):
        try:

            db = sqlite3.connect('userbase.db')
            c = db.cursor()
            if (" " in message.text and message.text.split()[1].isdigit()):
                referrer_candidate = message.text.split()[1]
                referrer_candidate = int(referrer_candidate)
                print("–†–µ—Ñ–µ—Ä–∞–ª –Ω–∞–π–¥–µ–Ω")
            # –ò–¥–µ–º –¥–∞–ª–µ–µ
            c.execute("SELECT * FROM users")
            items = c.fetchall()
            existence = False
            db.close()
            try:
                for i in range(len(items)):
                    if str(items[i][0]) == str(referrer_candidate):
                        existence = True
                        break
            except:
                print("// user sign in whith out reffer")

            for j in range(len(items)):
                if str(items[j][0]) == message.from_user.id:
                    break
            db = sqlite3.connect('userbase.db')
            c = db.cursor()
            c.execute("SELECT id FROM users")
            items = c.fetchall()
            existence = False
            for el in items:
                if str(el[0]) == str(user_id):
                    existence = True
            if existence == False:
                param = (
                    message.from_user.id, message.from_user.username, 25, 0, 0, "Dark Alpha", "1:1", "text", "null",
                    "null", "..", "..", 'null', 'null', 'null', '0', 1, '2', "0", "no_style", "", 10, 0, 0, 128, 1,
                    "empty", "empty")
                c.execute(
                    f"INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                    param)

                print(f"// User succesfuly added to db. \nid -> {user_id}, name -> {message.from_user.username}\n")
                os.mkdir('outs\\' + str(message.from_user.id))

                await message.answer(
                    f"<b>üñê –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.username}. –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b> \n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.",
                    parse_mode='html')

                db.commit()
                db.close()
                try:
                    referrer_candidate = message.text.split()[1]
                    referrer_candidate = int(referrer_candidate)
                    await bot.send_message(chat_id=int(referrer_candidate),
                                           text="üî• –ö—Ç–æ-—Ç–æ –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ 25 —Ç–æ–∫–µ–Ω–æ–≤!")
                    items = get_items(referrer_candidate)
                    save_data_in_database('balance', items[2] + 25, referrer_candidate)
                except:
                    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –Ω–µ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É")
            else:

                print(
                    f"// User already exists in data base.  \nid -> {user_id}, name -> {message.from_user.username}\n")
            db.close()

            if len(message.text.replace("/start ", "")) != 20:
                save_data_in_database("pose_status", 0, message.from_user.id)
                text = hlink('üÜï - –ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
                i_link = link("\u200C", "https://telegra.ph/file/2d6cde020cef67aec21e4.png")
                ch_link = link("–Ω–∞—à –∫–∞–Ω–∞–ª", "https://t.me/stablealpha")
                await bot.send_message(
                    message.chat.id,
                    text=f'''{i_link}üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.username}!*\n\n–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∞–Ω–∏–º–µ –∞—Ä—Ç? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞ –ø–æ—Ç–æ–º –∂–º–∏ *C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å*.\n–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—Ñ–∏, –º–æ–∂–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º—Ç —Å–∞–º.\n\n__–ù–∞—à –±–æ—Ç –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª–∞—Å–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∏—Ö –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!__\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {ch_link}, —Ç–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º, –∞ —Ç–∞–∫–∂–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –∞—Ä—Ç—ã –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n‚ú® –ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!''',
                    reply_markup=keyboard_ashare2,
                    reply_to_message_id=message.message_id, parse_mode="markdown", )
        except Exception as e:
            print(e)
            text = hlink('üÜï - –ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
            i_link = link("\u200C", "https://telegra.ph/file/2d6cde020cef67aec21e4.png")
            ch_link = link("–Ω–∞—à –∫–∞–Ω–∞–ª", "https://t.me/stablealpha")
            await bot.send_message(
                message.chat.id,
                text=f'''{i_link}üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.username}!*\n\n–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∞–Ω–∏–º–µ –∞—Ä—Ç? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞ –ø–æ—Ç–æ–º –∂–º–∏ *C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å*.\n–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—Ñ–∏, –º–æ–∂–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º—Ç —Å–∞–º.\n\n__–ù–∞—à –±–æ—Ç –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª–∞—Å–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∏—Ö –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!__\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {ch_link}, —Ç–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º, –∞ —Ç–∞–∫–∂–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –∞—Ä—Ç—ã –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n‚ú® –ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!''',
                reply_markup=keyboard_ashare2,
                reply_to_message_id=message.message_id, parse_mode="markdown", )


@dp.message_handler()
async def get_gen(message: types.Message, state: FSMContext):
    itemms = get_items(message.from_user.id)
    if not (itemms[1] == message.from_user.username):
        save_data_in_database("username", message.from_user.username, message.from_user.id)
    if str(message.from_user.id) not in get_all_user_id():
        await bot.send_message(message.chat.id, "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")
    else:
        if "/a" in message.text and (not ("https" in message.text)):
            await bot.send_message(914029246, message.text.replace("/a", "") + "\n\nid, username :" + str(
                message.from_user.id) + " " + str(message.from_user.username))
            await bot.send_message(message.chat.id,
                                   "<b>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç —Ç–∞–∫ —Å–∫–æ—Ä–æ, –∫–∞–∫ —Å–º–æ–∂–µ—Ç, —Å–ø–∞—Å–∏–±–æ!</b>",
                                   parse_mode="html")
        elif "https://" in message.text:
            await bot.send_message(message.chat.id,
                                   "<b>–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç—É—Ç) –ê –≤—ã –Ω–µ –±–æ–∏—Ç–µ—Å—å —á—Ç–æ –µ–µ –∫—Ç–æ-—Ç–æ —É–∫—Ä–∞–¥–µ—Ç?)</b>",
                                   parse_mode="html")
        elif message.text == "AlphaShare":

            if len(os.listdir('ashare')) == 0:
                await message.answer(text="–ü–æ—Ö–æ–∂–µ AlphaShare –ø—É—Å—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –≤—ã–ª–æ–∂–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            else:
                db = sqlite3.connect('userbase.db')
                c = db.cursor()
                c.execute(f"SELECT * FROM users")
                db.commit()
                items = c.fetchall()
                db.close()
                for i in range(len(items)):
                    if str(items[i][0]) == str(message.from_user.id):
                        break
                msg = await bot.send_message(message.from_user.id, "–ò—â–µ–º –∞—Ä—Ç—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
                rch = random.choice(os.listdir("ashare"))
                i = 0
                while rch.split('rd')[0] == str(message.from_user.id) or rch == items[i][18]:
                    rch = random.choice(os.listdir("ashare"))
                    i += 1
                    if i > 10:
                        break
                        await call.answer(text="–ü–æ—Ö–æ–∂–µ AlphaShare –ø—É—Å—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –≤—ã–ª–æ–∂–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
                                          show_alert=True)
                save_data_in_database("cur_alink", rch, message.from_user.id)
                gen_link = rch.split("rd")[1]
                ready_link = hlink("–°–∏–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", f"https://t.me/alphastabletbot?start={gen_link}")
                await bot.send_document(message.from_user.id, open("ashare\\" + rch, "rb"),
                                        caption=f"<b>‚ú® –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</b>\n\nüå± <b>{ready_link}</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–Ω—É—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –¥–∞–ª–µ–µ</i>",
                                        reply_markup=alphashare_contin_markup, parse_mode="html")
                await msg.delete()

        elif message.text == "/invite":
            await bot.send_message(message.chat.id,
                                   "üôã‚Äç‚ôÇÔ∏è <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞</b> \n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å 25 —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ \n\n<code>https://t.me/alphastabletbot?start=" + str(
                                       message.from_user.id) + "</code>",
                                   parse_mode='html')

        elif message.text == "/persons":
            await bot.send_message(message.chat.id,
                                   "<b>–ú—ã —Å–æ–±—Ä–∞–ª–∏ –≥–∞–ª–∞—Ä–µ—é –ø—Ä–æ–º—Ç–æ–≤ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º, –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å —Å–æ–∑–¥–∞—Ç—å</b>\n\nhttps://telegra.ph/Alpha-Stable-personazhi-05-14",
                                   parse_mode="html")

        elif message.text == '/casino':
            items = get_items(message.from_user.id)
            if items[2] < 10:
                await bot.send_message(message.from_user.id, "*–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É*",
                                       parse_mode='markdown')
            else:
                cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
                cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="cancel_neg")
                cancel_neg_markdown.add(cancel_neg_button)
                await bot.send_message(message.from_user.id,
                                       "üí∞ <b>–ö–∞–∑–∏–Ω–æ —Ç–æ–∫–µ–Ω–∞–º–∏</b>\n*<i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—É–º–Ω–æ–∂–∏—Ç—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã! –ù–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã)</i>\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 —Ç–æ–∫–µ–Ω–æ–≤\n\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à - 80 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n\n‚úÖ –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤ 1.4—Ö - 19 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n\nüí∞ –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤ 4—Ö - 1 –ø—Ä–æ—Ü–µ–Ω—Ç\n\n<i>–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å:</i>",
                                       parse_mode='html', reply_markup=cancel_neg_markdown)
                await Form.casino.set()
        elif message.text == "/qr":
            t_link = link("–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π QR –∫–æ–¥?", "https://telegra.ph/QR---kody-07-16")
            await bot.send_message(message.from_user.id,
                                   f"üî≥ *–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å QR-–∫–æ–¥*\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç",
                                   parse_mode='markdown', disable_web_page_preview=True)
            await Form.qr_image.set()
        elif message.text == "/balance":

            items = get_items(message.from_user.id)

            token = "4100118356657505.657B2F10480AE81531DF02D685E4349F8F58546CA3D48B6F9A52F4BD6B83F1D6BBCC61CDB109199CF9C8A35D864E6D853779F65D2D06EA2541B8C10B2BA1056C988C81BC0EFEE9B4B7CD63B7D4C635361AC77889036745C9269176DFB970040859009F3F8E328A153417E521C1D3DF5F0D1147F77886DAC050D7F6BCF56C4E4C"

            client = Client(token)
            history = client.operation_history()
            for operation in history.operations:
                if str(operation.label) == str(message.from_user.id) + "::" + str(items[8]):
                    save_data_in_database("balance", int(items[2] + int(items[8].split('spl')[1])),
                                          message.from_user.id)
                    save_data_in_database("pay_token", 'empty', message.from_user.id)
                    break

            await bot.send_message(message.chat.id, "üí≤ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: </b>"
                                   + str(items[
                                             2]) + "\n\n1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è = 10 —Ç–æ–∫–µ–Ω–æ–≤\n\n–ï—Å–ª–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 15 —Ç–æ–∫–µ–Ω–æ–≤, —Ç–æ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –¥–æ —ç—Ç–æ–π —Å—É–º–º—ã —á–µ—Ä–µ–∑ –¥–µ–Ω—å.\n\n<i>–ü—Ä–æ—Å—å–±–∞"
                                                   " –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
                                                   " –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /balance –µ—â–µ —Ä–∞–∑."
                                                   " –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –∫—É–ø–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã,"
                                                   " –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç,"
                                                   " –ø—Ä–æ–ø–∏—à–∏—Ç–µ: \n\n<code>/a [–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫"
                                                   " –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏]</code>\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –Ω–∏–∫ –≤"
                                                   " –æ–±—Ä–∞—â–µ–Ω–∏–∏.</i>",
                                   parse_mode="html", reply_markup=choose_amount_markup)

            client = Client(token)
            history = client.operation_history(label=(str(message.from_user.id) + "::" + str(items[8])))
            for operation in history.operations:
                if str(operation.label) == str(message.from_user.id) + "::" + str(items[8]):
                    save_data_in_database("balance", items[2] + int(items[8].split('spl')[1]), message.from_user.id)

        elif message.text == "/send_users_uvd":
            print("test")
            db = sqlite3.connect('userbase.db')
            c = db.cursor()
            c.execute(f"SELECT id FROM users")
            db.commit()
            items_gen = c.fetchall()
            db.close()
            ch_link = link("–∫–∞–Ω–∞–ª AlphaStable", "https://t.me/stablealpha")
            i_link = link("\u200C", "https://t.me/stablealpha/815")

            for i in range(len(items_gen)):
                print(items_gen[i])

                try:
                    await bot.send_message(chat_id=int(str(items_gen[i]).replace("('", '').replace("',)", "")),
                                           text=f"{i_link}*–ù–∞—á–∞–ª–∞—Å—å –∑–æ–ª–æ—Ç–∞—è –ª–∏—Ö–æ—Ä–∞–¥–∫–∞!*\n\n–®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –≤ /casino –ø–æ–≤—ã—à–µ–Ω—ã. –ì—Ä–∞–Ω–¥-–≤—ã–∏–≥—Ä—ã—à—å - 100x –æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã —Ç–æ–∫–µ–Ω–∞—Ö!",
                                           parse_mode="markdown")
                except BotBlocked:
                    print("blocker by user")
        elif message.text == "supptest":
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"[\u200C](https://i.ibb.co/VmH9DpG/Frame-1-34.png)*–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –Ø - Alpha Audio*\n\n–Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å YouTube/YouTube Shorts –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n–¢–∞–∫–∂–µ, —è –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –ø–æ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏—é. \n\n–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ [–Ω–∞–π—Ç–∏ —Ç—É—Ç](https://telegra.ph/Alpha-Audio-rukovodstvo-09-16) –∏ –≤ [–Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ](https://t.me/alpha_audio), –∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∏—à–∏ /search –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞",
                                   parse_mode='markdown')
        elif message.text == "/gift":
            create_gift_markup = InlineKeyboardMarkup(row_width=2)
            back_gift_button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="CANCEL_GIFT")
            create_gift_button = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data="CREATE_GIFT")
            create_gift_markup.add(back_gift_button, create_gift_button)

            await bot.send_message(message.chat.id,
                                   "üéÅ* –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É —Å –ø–æ–¥–∞—Ä–∫–æ–º —Å —Ç–æ–∫–µ–Ω–∞–º–∏. *\n\n–ï—Å–ª–∏ –µ–µ –æ—Ç–∫—Ä–æ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞, —Ç–æ –µ–º—É –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏–ª–∏!\n\n",
                                   parse_mode="markdown", reply_markup=create_gift_markup)

        else:
            if len(message.text) > 600:
                await bot.send_message(message.chat.id,
                                       "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–≤–æ–¥–∞ - 500 —Å–∏–º–≤–æ–ª–æ–≤",
                                       parse_mode="markdown")
            else:
                await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
                db = sqlite3.connect('prompts.db')
                c = db.cursor()

                negative_t = message.text

                # messages = [
                #     {"role": "system",
                #      "content": "you will be provided with image descriptions. translate each query into danbooru tags. answer with danbooru tags. be verbose. if describing several people with different appearances, put each one on a separate line. Don't use special signs and symbols like _ * and -. Always be sure to answer in English! In English only. example of answer: 1girl, solo, beatiful, red hairs. Example for several people: 2people, hug\n\n1girl\n\n1boy"}]
                # messages.append({"role": "user",
                #                  "content":
                #                      message.text})
                # completion = openai.ChatCompletion.create(
                #     model="gpt-3.5-turbo-instruct-0914",
                #     messages=messages,
                #     temperature=0.6
                # )
                # chat_response = completion.choices[0].message.content
                # prompt = chat_response

                prompt = negative_t
                '''def check_mat_en(text):
                    with open("en_profane_words.txt", "r") as file:
                        a = [line[:-1] for line in file]
                        for i in range(len(a)):
                            if a[i] in text:
                                status = False
                                return False
                                break
                            else:
                                status = True

                    return True
                print(prompt)
                if has_cyrillic(message.text) and check_mat_en(prompt.lower()):
                    messages = [
                        {"role": "system",
                         "content": "you will be provided with image descriptions. translate each query into danbooru tags. answer with danbooru tags. be verbose. if describing several people with different appearances, put each one on a separate line. Don't use special signs and symbols like _ * and -. Always be sure to answer in English! In English only. example of answer: 1girl, solo, beatiful, red hairs. Example for several people: 2people, hug\n\n1girl\n\n1boy"}]
                    messages.append({"role": "user",
                                     "content":
                                         prompt})
                    completion = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo-0613",
                        messages=messages,
                        temperature=0.6
                    )
                    chat_response = completion.choices[0].message.content
                    prompt = chat_response'''

                # time = datetime.time()
#
                # param = (str(prompt), str(time))
                # c.execute(f"INSERT INTO prompts VALUES (?, ?)", param)
                # db.commit()
                # print(prompt)
                # db.close()
                save_data_in_database('pose_status', 0, message.from_user.id)
                await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
                items = get_items(message.from_user.id)

                cur_model = items[5]
                cur_resol = items[6]

                save_data_in_database("raw_promt", prompt, message.from_user.id)
                save_data_in_database("promt", prompt, message.from_user.id)
                rp2 = ReplyKeyboardMarkup(resize_keyboard=True)
                rp2_button = KeyboardButton(text="–°—Ç–∏–ª–∏", web_app=WebAppInfo(url='https://innoky.github.io/#'))
                button_1 = types.KeyboardButton(text="AlphaShare")
                rp2.add(button_1, rp2_button)

                text = link('–ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
                # await bot.send_photo(message.chat.id, photo="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
                #                      caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n\n`{message.text}`\n\n- {text}\n\n*–°–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT edit –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{cur_model}**\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: **{cur_resol}**""",
                #                      reply_to_message_id=message.message_id,
                #                      parse_mode='markdown', reply_markup=propmt_markup)
                ms = await bot.send_message(chat_id=message.from_user.id, text=f"‚úèÔ∏è *–í—ã –≤–≤–µ–ª–∏:* `{message.text}`",
                                            reply_markup=rp2, parse_mode='markdown')
                txt = replace_description_txt2img(model=cur_model,
                                                  prompt=prompt,
                                                  resolution=cur_resol)
                mss = await bot.send_message(message.chat.id, text=txt,
                                             reply_to_message_id=message.message_id, parse_mode='markdown',
                                             reply_markup=propmt_markup, disable_web_page_preview=True)
                save_data_in_database("last_msg_id", mss.message_id, message.from_user.id)
                save_data_in_database("cur_settings", txt, message.from_user.id)


@dp.callback_query_handler()
async def func1(call: types.CallbackQuery, state: FSMContext):
    model = json.loads(open("model_json/model_info.json", encoding="utf-8").read())
    resolution = json.loads(open("model_json/resolution_info.json", encoding="utf-8").read())
    # style = json.loads(open("model_json/style.json", encoding="utf-8").read())
    # strength = json.loads(open("model_json/strength.json", encoding="utf-8").read())
    if str(call.from_user.id) not in get_all_user_id():
        await bot.send_message(call.message.chat.id,
                               "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")
    else:
        if call.data in model.keys():
            save_data_in_database("cur_model", call.data, call.from_user.id)
            input_file = replace_description_model(call.data)
            if call.data in ("Dark Alpha", "Light Alpha", "3DAlpha"):
                await call.message.edit_text(input_file, reply_markup=choose_model_alpha_markup, parse_mode="markdown")
            else:
                await call.message.edit_text(input_file, reply_markup=choose_model_markup, parse_mode="markdown")
        elif call.data == "Alpha":

            i_link = link("\u200C", "https://telegra.ph/file/a6df906b22412c27718b5.png")
            text_alpha = f"{i_link}*Alpha (2/2)*\n\n_–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π Alpha. –ö–∞–∂–¥–∞—è –∏–∑ –Ω–∏—Ö –ø–æ –æ—Å–æ–±–µ–Ω–Ω–æ–º—É –∫—Ä–∞—Å–∏–≤–∞ –∏ –∏–º–µ–µ—Ç —Å–≤–æ—é –∏–∑—é–º–∏–Ω–∫—É._"
            await call.message.edit_text(text=text_alpha, reply_markup=choose_model_alpha_markup, parse_mode="markdown")
        elif call.data in resolution.keys():
            save_data_in_database("resol", call.data, call.from_user.id)
            input_file = InputMedia(type="photo", media=resolution[call.data]["image"],
                                    caption=f"<b>{call.data}</b>", parse_mode="html")
            i_link = link("\u200C", resolution[call.data]["image"])
            text_resol = f"{i_link}*{call.data}*"
            await call.message.edit_text(text_resol, reply_markup=choose_resolution_markup, parse_mode="markdown")
        elif call.data in ("choose_model", "back_button"):
            if call.data == "choose_model":
                text_m = call.message.text
                save_data_in_database("cur_settings", text_m, call.from_user.id)
            items = get_items(call.from_user.id)
            await call.message.edit_text(replace_description_model(items[5]), reply_markup=choose_model_markup,
                                         parse_mode="markdown")
        elif call.data in ("save_resol_button", "save_model_button", "save_style"):
            items = get_items(call.from_user.id)
            settings_dict = get_settings_ready_txt2img(items[20])
            resol_m = settings_dict["resol"]
            model_m = settings_dict["model"]
            style_m = settings_dict["style"]
            prompt_m = settings_dict["prompt"]
            if call.data == "save_resol_button":
                resol_m = items[6]
            elif call.data == "save_model_button":
                model_m = items[5]
            elif call.data == "save_style":
                style_m = items[19]
                prompt_m = items[7]
            text_commit = replace_description_txt2img(model=model_m, resolution=resol_m, seed=settings_dict["seed"],
                                                      prompt=prompt_m,
                                                      negative=settings_dict["negative"], style=style_m)
            await call.message.edit_text(text=text_commit, reply_markup=propmt_markup, parse_mode="markdown",
                                         disable_web_page_preview=True)
        elif call.data == "CANCEL_GIFT":
            await call.message.delete()
        elif call.data == "CREATE_GIFT":
            cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
            cancel_neg_button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_neg")
            cancel_neg_markdown.add(cancel_neg_button)
            await call.message.edit_text(
                text="üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞*\n\n–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è —Ç–æ–º—É, –∫–æ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–º—É —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –≤—ã–π–¥–µ—Ç.",
                parse_mode="markdown", reply_markup=cancel_neg_markdown)
            await Form.gift_amount.set()
        elif call.data == "resolution":
            text_m = call.message.text
            save_data_in_database("cur_settings", text_m, call.from_user.id)
            file_resol = InputMedia(type="photo",
                                    media="https://i.ibb.co/DM3L2Yd/Frame-2-2023-05-09-T155404-006.png",
                                    caption="<b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ö–≤–∞–¥—Ä–∞—Ç, –ø–æ—Ä—Ç—Ä–µ—Ç, –∞–ª—å–±–æ–º</b>",
                                    parse_mode="html")
            i_link = link("\u200C", "https://i.ibb.co/DM3L2Yd/Frame-2-2023-05-09-T155404-006.png")
            text_resol = f"{i_link}*–î–æ—Å—Ç—É–ø–Ω–æ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ö–≤–∞–¥—Ä–∞—Ç, –ø–æ—Ä—Ç—Ä–µ—Ç, –∞–ª—å–±–æ–º*"
            await call.message.edit_text(text_resol, reply_markup=choose_resolution_markup, parse_mode="markdown")
        elif call.data == 'style':
            text_m = call.message.text
            save_data_in_database("cur_settings", text_m, call.from_user.id)
            file_styles = InputMedia(type="photo", media="https://i.ibb.co/BCqL6g3/Frame-1-87.png",
                                     caption="üéâ *–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –ø—Ä—è–º–æ –≤ –º–µ–Ω—é, –∞ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–æ–º—Ç–µ*\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ —Å—Ç–∏–ª—å –∏ –Ω–∞–∂–º–∏ *–°–æ—Ö—Ä–∞–Ω–∏—Ç—å*",
                                     parse_mode='markdown')
            link_i = link("\u200C", "https://i.ibb.co/BCqL6g3/Frame-1-87.png")
            text_i = f"{link_i}üéâ *–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –ø—Ä—è–º–æ –≤ –º–µ–Ω—é, –∞ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–æ–º—Ç–µ*\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ —Å—Ç–∏–ª—å –∏ –Ω–∞–∂–º–∏ *–°–æ—Ö—Ä–∞–Ω–∏—Ç—å*"
            await call.message.edit_text(text_i, reply_markup=styles_markup, parse_mode="markdown")
        elif call.data == "ragemode_chooser":
            await call.message.edit_reply_markup(rage_markup)
        elif call.data in style.keys():
            st(call.data, call.from_user.id)
            save_data_in_database("style", call.data, call.from_user.id)
            await call.message.edit_text(replace_description_style(call.data), reply_markup=styles_markup,
                                         parse_mode="markdown")
        elif call.data in strength.keys():
            save_data_in_database("streight", int(call.data), call.from_user.id)
            file_streight = InputMedia(type="photo",
                                       media=open(f'outs/{call.from_user.id}/{call.from_user.id}raw.jpg', 'rb'),
                                       caption=f"*–î–æ—Å—Ç—É–ø–Ω–æ –ø—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–∏–ª*\n\n–í—ã–±—Ä–∞–Ω–æ:"
                                               f" {strength[call.data]['desc']}")
            await call.message.edit_media(file_streight, reply_markup=choose_streight_markup)
        elif call.data == "upscale":
            await call.message.delete()
            itemsss = get_items(call.from_user.id)
            if int(itemsss[2]) > 20 and str(itemsss[3]) == "0":
                async with state.proxy() as data:
                    msg_id = data['msg_id_hqsu']
                    file_name = msg_id.document.file_name
                db = sqlite3.connect('userbase.db')
                c = db.cursor()
                c.execute(f"SELECT * FROM users")
                db.commit()
                items_gen = c.fetchall()
                db.close()
                sum_time = 1
                for i in range(len(items_gen)):
                    sum_time = sum_time + int(items_gen[i][3])
                sum_time = str((sum_time * 15) - 15 + 35)
                items = get_items(call.from_user.id)
                save_data_in_database('status', 1, call.from_user.id)
                if not (str(items[0]) in ("1430025958", "415356744")):
                    save_data_in_database('balance', items[2] - 20, call.from_user.id)
                ms = await bot.send_message(chat_id=call.from_user.id,
                                            text=f'<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å.</b> \n\n<i>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ~{sum_time} —Å–µ–∫—É–Ω–¥(—ã). –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑-–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤. –ë–æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢–∞–∫–∂–µ –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç, —Ç–∞–º –º—ã –¥–µ–ª–∏–º—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞–µ–º—Å—è</i>',
                                            reply_markup=keyboard_ashare,
                                            parse_mode="html")
                save_data_in_database("edit_last", ms.message_id, call.from_user.id)

                p2 = Process(target=upscale_start, args=(call.from_user.id, file_name))
                p2.start()
            else:
                if str(itemsss[3]) != "0":
                    await call.answer(
                        "–í—ã —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ —á—Ç–æ-—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        show_alert=True)
                else:
                    await bot.send_message(chat_id=call.from_user.id,
                                           text="*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤*\n–ü—Ä–æ–ø–∏—à–∏—Ç–µ /balance –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                                           parse_mode="markdown")

        elif call.data == 'write_history':
            await call.message.answer(text="‚úç *–ù–∞—á–∞–ª–∏ –ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é...*",
                                      parse_mode='markdown')
            items = get_items(call.from_user.id)
            print(items[7])
            messages = [
                {"role": "system",
                 "content": "You need to write a story based on the tags given to you. Let the story not exceed 5 sentences. Be creative and come up with an interesting story. Write the entire text in Russian. "}]

            messages.append({"role": "user",
                             "content": items[7]})

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages
            )

            result = completion.choices[0].message.content
            await call.message.answer(text="*‚úç –ú—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏—é –∫ –∞—Ä—Ç—É, –≤–æ—Ç –æ–Ω–∞:*\n\n" + result,
                                      parse_mode='markdown')
        elif call.data == 'play_casino':
            items = get_items(call.from_user.id)
            amount = items[21]
            roll_num = random.randint(0, 100)
            if roll_num <= 5:
                await call.message.edit_text(
                    text="‚ùå *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.* \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É –≤–∞—Å –µ—Å—Ç—å —à–∞–Ω—Å –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è\n\n/casino",
                    parse_mode='markdown')
                save_data_in_database("balance", int(items[2]) - int(amount), call.from_user.id)

            elif roll_num > 6:
                await call.message.edit_text(
                    text=f"‚úÖ *–î–∞ –≤—ã –≤–µ–∑—É–Ω—á–∏–∫, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {int(round(amount * 10))} —Ç–æ–∫–µ–Ω–æ–≤!* \n\n–í—ã –ø–æ—Ö–æ–∂–µ –≤—ã—à–ª–∏ –Ω–∞ –ø–æ–±–µ–¥–Ω—É—é –¥–æ—Ä–æ–∂–∫—É!\n\n/casino",
                    parse_mode='markdown')
                save_data_in_database("balance", items[2] + int(round(amount * 10)), call.from_user.id)
            print(roll_num)
        elif call.data == 'save_str':
            items = get_items(call.from_user.id)
            file_streight_commit = InputMedia(type="photo",
                                              media=open(f'outs/{call.from_user.id}/{call.from_user.id}raw.jpg',
                                                         'rb'),
                                              caption=f"**ü•≥ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ –≤ –∞–Ω–∏–º–µ!**\n\n"
                                                      f" –ü—Ä–æ—Å—Ç–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å**.\n\n"
                                                      f"ü§ñ **Auto –ü—Ä–æ–º—Ç**: `{items[7]}`\n\n"
                                                      f"*–°–∏–ª–∞:* {strength[str(items[17])]['name']}",
                                              parse_mode='markdown')
            await call.message.edit_media(file_streight_commit,
                                          reply_markup=propmt_markup_img)
        elif call.data == "streight":
            textl = hlink("*–ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—É—Ç", 'https://telegra.ph/Primery-sil-Img2Img-06-18')
            await call.message.edit_caption(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–ª—É –¥–µ–π—Å—Ç–≤–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞: \n\n{textl}", parse_mode="html",
                                            reply_markup=choose_streight_markup)
        elif call.data == "tf_button":
            items = get_items(call.from_user.id)
            current_time = str(t.time()) + "spl" + "50"
            save_data_in_database("pay_token", current_time, call.from_user.id)

            quickpay = Quickpay(
                receiver="4100118356657505",
                quickpay_form="shop",
                targets="Alpha tokens",
                paymentType="SB",
                sum=25,
                label=str(call.from_user.id) + '::' + str(current_time)
            )
            pay_link = quickpay.redirected_url

            pay_link_markup = InlineKeyboardMarkup()
            pay_link_button = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=pay_link)
            pay_link_markup.row(pay_link_button).row(back_balance_button)
            await call.message.edit_text(
                text="*–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ 50 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 25 —Ä—É–±–ª–µ–π*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                parse_mode='markdown', reply_markup=pay_link_markup)
        elif call.data == "f_button":
            items = get_items(call.from_user.id)
            current_time = str(t.time()) + "spl" + "100"
            save_data_in_database("pay_token", current_time, call.from_user.id)

            quickpay = Quickpay(
                receiver="4100118356657505",
                quickpay_form="shop",
                targets="Alpha tokens",
                paymentType="SB",
                sum=49,
                label=str(call.from_user.id) + '::' + str(current_time)
            )

            pay_link = quickpay.redirected_url

            pay_link_markup = InlineKeyboardMarkup()
            pay_link_button = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=pay_link)
            pay_link_markup.row(pay_link_button).row(back_balance_button)
            await call.message.edit_text(
                text="*–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ 100 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 49 —Ä—É–±–ª–µ–π*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                parse_mode='markdown', reply_markup=pay_link_markup)
        elif call.data == "nf_button":
            items = get_items(call.from_user.id)
            current_time = str(t.time()) + "spl" + "200"
            save_data_in_database("pay_token", current_time, call.from_user.id)

            quickpay = Quickpay(
                receiver="4100118356657505",
                quickpay_form="shop",
                targets="Alpha tokens",
                paymentType="SB",
                sum=90,
                label=str(call.from_user.id) + '::' + str(current_time)
            )
            pay_link = quickpay.redirected_url

            pay_link_markup = InlineKeyboardMarkup()
            pay_link_button = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=pay_link)
            pay_link_markup.row(pay_link_button).row(back_balance_button)
            await call.message.edit_text(
                text="*–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ 200 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 90 —Ä—É–±–ª–µ–π*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                parse_mode='markdown', reply_markup=pay_link_markup)
        elif call.data == "ohf_button":
            items = get_items(call.from_user.id)
            current_time = str(t.time()) + "spl" + "300"
            save_data_in_database("pay_token", current_time, call.from_user.id)

            quickpay = Quickpay(
                receiver="4100118356657505",
                quickpay_form="shop",
                targets="Alpha tokens",
                paymentType="SB",
                sum=149,
                label=str(call.from_user.id) + '::' + str(current_time)
            )

            pay_link = quickpay.redirected_url

            pay_link_markup = InlineKeyboardMarkup()
            pay_link_button = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=pay_link)
            pay_link_markup.row(pay_link_button).row(back_balance_button)
            await call.message.edit_text(
                text="*–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ 300 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 149 —Ä—É–±–ª–µ–π*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                parse_mode='markdown', reply_markup=pay_link_markup)
        elif call.data == 'back_balance_button':
            items = get_items(call.from_user.id)
            await call.message.edit_text("üí≤ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: </b>"
                                         + str(items[2]) + "\n\n1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è = 10 —Ç–æ–∫–µ–Ω–æ–≤\n\n<i>–ü—Ä–æ—Å—å–±–∞"
                                                           " –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
                                                           " –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /balance –µ—â–µ —Ä–∞–∑."
                                                           " –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –∫—É–ø–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã,"
                                                           " –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç,"
                                                           " –ø—Ä–æ–ø–∏—à–∏—Ç–µ: \n\n<code>/a [–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫"
                                                           " –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏]</code>\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –Ω–∏–∫ –≤"
                                                           " –æ–±—Ä–∞—â–µ–Ω–∏–∏.</i>",
                                         parse_mode="html", reply_markup=choose_amount_markup)

        elif call.data == 'stay_promt':
            text_m = call.message.text
            s = get_settings_ready_txt2img(text_m)
            items = get_items(call.from_user.id)
            messages = [
                {"role": "system",
                 "content": "you will be provided with image descriptions. translate each query into danbooru tags. be verbose. if describing several people with different appearances, put each one on a separate line. Always be sure to answer in English! In English only."}]
            messages.append({"role": "user",
                             "content":
                                 s["prompt"]})
            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo-0613",
                messages=messages,
                temperature=0.9
            )
            chat_response = completion.choices[0].message.content
            promt_global = chat_response
            save_data_in_database("promt", promt_global, str(call.from_user.id))
            file = InputMedia(type='photo', media="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
                              caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n–ü—Ä–æ–º—Ç: `{promt_global}` \n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{items[5]}\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {items[6]}**""",
                              parse_mode='markdown', reply_markup=propmt_markup)
            text_i = replace_description_txt2img(model=s["model"], prompt=promt_global, seed=s["seed"],
                                                 resolution=s["resol"], style=s["style"], negative=s["negative"])
            await call.message.edit_text(text_i, reply_markup=propmt_markup, parse_mode="markdown",
                                         disable_web_page_preview=True)
        elif call.data == 'zoom':
            items = get_items(call.from_user.id)
            if int(items[2]) < 25:

                await bot.send_message(chat_id=call.from_user.id,
                                       text="*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤*\n–ü—Ä–æ–ø–∏—à–∏—Ç–µ /balance –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                                       parse_mode="markdown")
            else:
                zoom_choose_markup = InlineKeyboardMarkup(row_width=2)
                horizontal_button_zoom = InlineKeyboardButton(text="–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ", callback_data="horizontal_zoom")
                vertical_button_zoom = InlineKeyboardButton(text="–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ", callback_data="vertical_zoom")
                all_button_zoom = InlineKeyboardButton("–í–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã", callback_data="all_zoom")
                zoom_choose_markup.add(horizontal_button_zoom, vertical_button_zoom, all_button_zoom)
                await bot.send_message(chat_id=call.from_user.id,
                                       text="*–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–∞–¥—Ä*\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–∞–¥—Ä–∞ –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã, –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞.",
                                       parse_mode="markdown", reply_markup=zoom_choose_markup)
        elif call.data == "make_better":
            link_su = link("üî• SuperUpscale", "https://t.me/stablealpha/335")
            link_hq = link("‚¨ÜÔ∏è Hquality", "https://t.me/stablealpha/145")
            async with state.proxy() as data:
                data['msg_id_hqsu'] = call.message
            await bot.send_message(chat_id=call.from_user.id,
                                   text=f"{link_su} - —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∞. –ó–∞–º—ã–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ —Å—Ç–∞–Ω—É—Ç —á–µ—Ç—á–µ, —É–ª—É—á—à–∏—Ç—Å—è –ø—Ä–æ—Ä–∏—Å–æ–≤–∫–∞ –ª–∏—Ü.\n\n{link_hq} - —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∑–∞–º–µ—Ç–Ω–æ —á–µ—Ç–∫–∏–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏, –æ–≥—Ä–æ–º–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π –∏ –±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º.\n\n*1 SuperUpscale - 20 —Ç–æ–∫–µ–Ω–æ–≤*\n*1 Hquality - 15 —Ç–æ–∫–µ–Ω–æ–≤*",
                                   parse_mode="markdown", reply_to_message_id=call.message.message_id,
                                   reply_markup=hq_and_su_markup, disable_web_page_preview=True)
        elif call.data == "back_hqandsu":
            await call.message.delete()
        elif call.data in ("horizontal_zoom", "vertical_zoom", "all_zoom"):
            if call.data == "horizontal_zoom":
                save_data_in_database('zoom_status', 1, call.from_user.id)
            elif call.data == "vertical_zoom":
                save_data_in_database('zoom_status', 2, call.from_user.id)
            elif call.data == "all_zoom":
                save_data_in_database('zoom_status', 0, call.from_user.id)

            zoom_scale_markup = InlineKeyboardMarkup(row_width=3)
            ohte_zoom = InlineKeyboardButton(text="64 px", callback_data="64px")
            thfs_zoom = InlineKeyboardButton(text="128 px", callback_data="128px")
            fht_zoom = InlineKeyboardButton(text="256 px", callback_data="256px")
            zoom_scale_markup.add(ohte_zoom, thfs_zoom, fht_zoom)
            await call.message.edit_text(
                text="*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ*\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –±–æ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö—É–∂–µ, —á–µ–º –ø—Ä–∏ –º–µ–Ω—å—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–∏.",
                reply_markup=zoom_scale_markup, parse_mode="markdown")
        elif call.data in ("64px", "128px", "256px"):
            if call.data == "64px":
                save_data_in_database('zoom_scale', 64, call.from_user.id)
            elif call.data == "128px":
                save_data_in_database('zoom_scale', 128, call.from_user.id)
            elif call.data == "256px":
                save_data_in_database('zoom_scale', 256, call.from_user.id)
            link_text = link("—ç—Ç—É —Å—Ç–∞—Ç—å—é", 'https://telegra.ph/ZOOM-07-20-4')
            await call.message.edit_text(
                text=f"*–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç*\n\n–£–∫–∞–∂–∏—Ç–µ –≤ –Ω–µ–º —Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–≤–∏–¥–µ—Ç—å –≤ –Ω–æ–≤–æ–º –∫–∞–¥—Ä–µ.\n\n–¢–µ –∫—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω—Ü–∏–µ–π –≤–ø–µ—Ä–≤—ã–µ, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å {link_text}. –û—Ç –ø—Ä–æ–º—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç 50% —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
                parse_mode='markdown', disable_web_page_preview=True)
            await Form.zoom_prompt.set()
        elif call.data in ("start_gen", "restart_gen", "hquality"):
            items = get_items(call.from_user.id)
            if items[3] == 1:
                await call.answer(
                    "–í—ã —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ —á—Ç–æ-—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True)
            else:
                tokens = 10
                if call.data == "hquality":
                    tokens = 15
                settings = dict()
                if call.data == "start_gen":
                    settings = get_settings_ready_txt2img(call.message.text)
                elif call.data in ("restart_gen", "hquality"):
                    if call.data == "hquality":
                        async with state.proxy() as data:
                            msg_id = data['msg_id_hqsu']
                            settings = get_settings_get_txt2img(msg_id.caption)
                    else:
                        settings = get_settings_get_txt2img(call.message.caption)
                if items[2] < tokens:
                    await call.message.answer(
                        "*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã*\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö —É –Ω–∞—Å –≤ –º–µ–Ω—é, –ª–∏–±–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤ –±–æ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –µ—ë —Ç–æ–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –º–µ–Ω—é",
                        parse_mode='markdown')
                else:
                    if call.data == "start_gen":
                        await call.message.delete()
                    db = sqlite3.connect('userbase.db')
                    c = db.cursor()
                    c.execute(f"SELECT * FROM users")
                    db.commit()
                    items_gen = c.fetchall()
                    db.close()
                    sum_time = 1
                    if call.data in ("start_gen", "restart_gen"):
                        for i in range(len(items_gen)):
                            sum_time = sum_time + int(items_gen[i][3])
                        sum_time = str(sum_time * 15)
                    elif call.data == "hquality":
                        for j in range(len(items_gen)):
                            sum_time = sum_time + int(items_gen[j][3])
                        sum_time = str(sum_time * 10 - 10 + 28)

                    if call.data == "restart_gen":
                        h_l = hlink("–Ω–∞—à —á–∞—Ç", "")
                        ms = await call.message.answer(
                            f'<b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å.</b> \n\n<i>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ~{sum_time} —Å–µ–∫—É–Ω–¥(—ã). –ë–æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑-–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤. –¢–∞–∫–∂–µ –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç, —Ç–∞–º –º—ã –¥–µ–ª–∏–º—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞–µ–º—Å—è</i>',
                            reply_markup=keyboard_ashare,
                            parse_mode="html")
                        save_data_in_database("edit_last", ms.message_id, call.from_user.id)
                    elif call.data == "hquality":
                        await call.message.delete()
                        ms = await bot.send_message(chat_id=call.from_user.id,
                                                    text=f'‚¨ÜÔ∏è *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å.*\n\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ~{sum_time} —Å–µ–∫—É–Ω–¥(—ã). –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑-–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤. –ë–æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
                                                    reply_markup=keyboard_ashare, parse_mode="markdown")
                        save_data_in_database("edit_last", ms.message_id, call.from_user.id)
                    else:
                        ms = await call.message.answer(
                            f'<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å.</b> \n\n<i>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ~{sum_time} —Å–µ–∫—É–Ω–¥(—ã). –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑-–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤. –ë–æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢–∞–∫–∂–µ –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç, —Ç–∞–º –º—ã –¥–µ–ª–∏–º—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞–µ–º—Å—è</i>',
                            reply_markup=keyboard_ashare,
                            parse_mode="html")
                        save_data_in_database("edit_last", ms.message_id, call.from_user.id)
                    save_data_in_database("status", 1, call.from_user.id)
                    if call.data == "hquality":
                        if not (str(items[0]) in ("1430025958", "415356744")):
                            save_data_in_database("balance", items[2] - 15, call.from_user.id)

                    else:
                        if not (str(items[0]) in ("1430025958", "415356744")):
                            if (str(items[0]) in ("943447764")) and items[5] in ("Omega"):
                                print("Unlimited")
                            elif (str(items[0]) in ("6134392324", "914029246")) and items[5] in (
                            "Omicron", "3DAlpha", "Omega"):
                                print("ULIMITED")
                            else:
                                save_data_in_database("balance", items[2] - 10, call.from_user.id)
                    model_m = settings["model"]
                    resol_m = settings["resol"]
                    seed_m = settings["seed"]
                    style_m = settings["style"]
                    negative_m = settings["negative"]
                    prompt_m = settings["prompt"]
                    hq = call.data == "hquality"
                    p = Process(target=generate, args=(prompt_m, model_m, resol_m, call.from_user.id, style_m, hq,
                                                       seed_m, negative_m, call.data == "restart_gen"))
                    print(call.from_user.username)
                    p.start()

                    # prompt, model, resol, user_id, style, hq=False, seed=-1, negative=""
        #elif call.data == "check_gen":
#
        #    api_key = "8FDMB6CCISMARJK4C6LP24GPCGI59MUAS1UEPXIF"
        #    items = get_items(call.from_user.id)
        #    job_id = items[27]
#
        #    res = requests.post(url=f'https://api.runpod.ai/v2/r9puknkh1poi7d/status/{job_id}',
        #                        auth=BearerAuth(f'{api_key}'))
        #    if job_id == "empty":
        #        await call.answer(
        #            text="‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...",
        #            show_alert=True)
        #    elif job_id == "error":
        #        save_data_in_database("status", 0, call.from_user.id)
        #        save_data_in_database("hquality", 0, call.from_user.id)
        #        itemss = get_items(call.from_user.id)
        #        save_data_in_database("balance", int(itemss[2]) + 20, call.from_user.id)
        #        print("request does not exist")
        #        await call.answer(
        #            text="‚ùå –ü–æ—Ö–æ–∂–µ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π. \n–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.",
        #            show_alert=True)
        #        await call.message.delete()
        #    else:
        #        if "request does not exist" in res.text:
        #            save_data_in_database("status", 0, call.from_user.id)
        #            save_data_in_database("hquality", 0, call.from_user.id)
        #            itemss = get_items(call.from_user.id)
        #            save_data_in_database("balance", int(itemss[2]) + 20, call.from_user.id)
        #            print("request does not exist")
        #            await call.answer(
        #                text="‚ùå –ü–æ—Ö–æ–∂–µ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π. \n–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.",
        #                show_alert=True)
        #            await call.message.delete()
        #        elif "IN_PROGRESS" in res.text:
        #            print("IN_PROGRESS")
        #            await call.answer(
        #                text="üî• –° –≤–∞—à–∏–º –∞—Ä—Ç–æ–º –≤—Å–µ —Ö–æ—Ä–æ—à–æ. \n–û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ª–∏–±–æ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.",
        #                show_alert=True)
        #        else:
        #            save_data_in_database("status", 0, call.from_user.id)
        #            save_data_in_database("hquality", 0, call.from_user.id)
        #            itemss = get_items(call.from_user.id)
        #            save_data_in_database("balance", int(itemss[2]) + 20, call.from_user.id)
        #            print("request does not exist")
        #            await call.answer(
        #                text="‚ùå –ü–æ—Ö–æ–∂–µ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π. \n–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.",
        #                show_alert=True)
        #            await call.message.delete()

        elif call.data == "negative":
            text_m = call.message.text
            save_data_in_database("cur_settings", text_m, call.from_user.id)
            cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
            cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="cancel_neg")
            cancel_neg_markdown.add(cancel_neg_button)
            await call.message.edit_text(
                text="üôÖ‚Äç *–ù–µ–≥–∞—Ç–∏–≤* –ø–æ–∑–≤–æ–ª—è—Ç —É–±—Ä–∞—Ç—å —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.\n\n*–ü—Ä–æ—Å—å–±–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å*, —á—Ç–æ –º—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤. –ù–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤–µ—â–∏ –ø–æ —Ç–∏–ø—É (bad hands, worst hands), –º—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏ —Å–∞–º–∏!)\n\n// –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ —Å–≤–æ–µ–º –≤–≤–æ–¥–µ. –¢–µ–∫—Å—Ç —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n‚ùå *–í–≤–µ–¥–∏—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:*",
                parse_mode="markdown", reply_markup=cancel_neg_markdown)

            async with state.proxy() as data:
                data['msg_id_neg'] = call.message
            await Form.negative_wait.set()



        elif call.data == "seed":
            text_m = call.message.text
            save_data_in_database("cur_settings", text_m, call.from_user.id)
            cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
            cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="cancel_neg")
            cancel_neg_markdown.add(cancel_neg_button)
            await call.message.edit_text(
                "üå± *–°–∏–¥ - —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–µ—Ç ( –æ—Å–Ω–æ–≤—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ )* \n\n–í–≤–µ–¥—è —Å—é–¥–∞ —Å–∏–¥ –∏–∑ –¥—Ä—É–≥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –±–ª–∏–∑–∫–∏–π –ø–æ —Å–º—ã—Å–ª—É –ø—Ä–æ–º—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—á–µ–Ω—å —Å—Ö–æ–∂–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–∞–≤–¥–∞ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –º–æ–¥–µ–ª—è–º.\n\n*–í–≤–µ–¥–∏—Ç–µ —Å–∏–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:*",
                parse_mode="markdown", reply_markup=cancel_neg_markdown)
            async with state.proxy() as data:
                data['seed_id'] = call.message.message_id
            await Form.seed_state.set()
        elif call.data == "ref_mode":

            choose_ref_mode = InlineKeyboardMarkup(row_width=1)
            reference = InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–µ–Ω—Å", callback_data="pose")
            masked_text = InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å", callback_data="hidden_text")
            qr_code = InlineKeyboardButton(text="QR –∫–æ–¥", callback_data="qr_hidden")
            cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="back_ref")
            choose_ref_mode.row(qr_code, masked_text).row(cancel_neg_button)
            f_link = link("–†–µ—Ñ–µ—Ä–µ–Ω—Å", "https://telegra.ph/Generaciya-po-referensu-07-13")
            h_link = link("–°–∫—Ä—ã—Ç—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å", "https://telegra.ph/Skrytyj-tekst--referens-07-26")
            await call.message.edit_text(
                text=f"*–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.* \n\n{f_link} –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –≤–∑—è—Ç–∞ –ø–æ–∑–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –∏ —Ü–≤–µ—Ç–∞ –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n{h_link} –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–≥–ª—è–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ –∏ –Ω–µ –∑–∞–º–µ—Ç–∏—Ç—å, –Ω–æ —Å—Ç–æ–∏—Ç –∑–∞–∂–º—É—Ä–∏—Ç—å –≥–ª–∞–∑–∫–∏, –∫–∞–∫ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –º–∞–≥–∏—è!",
                disable_web_page_preview=True,
                parse_mode='markdown', reply_markup=choose_ref_mode)
        elif call.data == "qr_hidden":
            cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
            cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="cancel_neg")
            cancel_neg_markdown.add(cancel_neg_button)

            msg = await call.message.edit_text(
                text="üî≤ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤ QR-–∫–æ–¥*",
                disable_web_page_preview=True,
                parse_mode='markdown', reply_markup=cancel_neg_markdown)
            async with state.proxy() as data:
                data['qr_text_id'] = msg.message_id
            await Form.qr_hidden_text.set()
        elif call.data == "back_ref":
            items = get_items(call.from_user.id)

            cur_model = items[5]
            cur_resol = items[6]

            text = link('–ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
            # await bot.send_photo(message.chat.id, photo="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
            #                      caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n\n`{message.text}`\n\n- {text}\n\n*–°–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT edit –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{cur_model}**\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: **{cur_resol}**""",
            #                      reply_to_message_id=message.message_id,
            #                      parse_mode='markdown', reply_markup=propmt_markup)
            await call.message.edit_text(text=replace_description_txt2img(model=cur_model,
                                                                          prompt=items[7],
                                                                          resolution=cur_resol),
                                         parse_mode='markdown',
                                         reply_markup=propmt_markup, disable_web_page_preview=True)
        elif call.data == "hidden_text":
            cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
            cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="cancel_neg")
            cancel_neg_markdown.add(cancel_neg_button)
            lk = link("\u200C", "https://telegra.ph/file/47633aace2b91b102cb11.png")
            ht = link("‚ùì –ö–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º?", "https://telegra.ph/Skrytyj-referens-08-01")
            msg = await call.message.edit_text(
                text=f"üî†{lk} *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Ç–æ–º –∏–ª–∏ —á/–± —Ä–∏—Å—É–Ω–∫–æ–º.* \n\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω —Ç–µ–∫—Å—Ç, —Ç–∞–∫–∂–µ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–æ–Ω - —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –∞ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å - –±–µ–ª–æ–≥–æ\n\n{ht}",
                disable_web_page_preview=False,
                parse_mode='markdown', reply_markup=cancel_neg_markdown, )
            async with state.proxy() as data:
                data['text_id'] = msg.message_id
            await Form.text.set()
        elif call.data == "pose":
            cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
            cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="cancel_neg")
            cancel_neg_markdown.add(cancel_neg_button)
            msg = await call.message.edit_text(
                text="üï∫ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.* \n\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω—ã –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏, —Ç–∞–∫–∂–µ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∞—à –ø—Ä–æ–º—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å, –¥–∞–µ—Ç –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–µ–ª–∞–µ–º–æ–π –ø–æ–∑–µ, –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ, –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ",
                parse_mode='markdown', reply_markup=cancel_neg_markdown)
            async with state.proxy() as data:
                data['pose_id'] = msg.message_id
            await Form.pose.set()
        elif call.data == "like":
            await call.message.edit_reply_markup(alphashare_contin_markup_2)
            doc_id = call.message.document.file_name
            id_u = doc_id.split("rd")[0]
            items = get_items(int(id_u))
            if int(id_u) == call.from_user.id:
                await call.answer(text="–£–ø—Å—Å... –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –≤–∞—à –ø–æ—Å—Ç", show_alert=True)
            else:
                save_data_in_database("balance", items[2] + 3, id_u)
                os.remove(f"ashare/{doc_id}")
                await bot.send_message(id_u,
                                       "‚ù§Ô∏è *–ö—Ç–æ-—Ç–æ –æ—Ü–µ–Ω–∏–ª –≤–∞—à –∞—Ä—Ç.*\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 3 —Ç–æ–∫–µ–Ω–æ–≤! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ AlphaShare",
                                       parse_mode="markdown")
        elif call.data == "set_amount":
            back_markup_mr = InlineKeyboardMarkup(row_width=1)
            back_markup_mr.add(back_balance_button)
            cancel_neg_markdown = InlineKeyboardMarkup(row_width=1)
            cancel_neg_button = InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="cancel_neg")
            cancel_neg_markdown.add(cancel_neg_button)
            await call.message.edit_text(
                text="üí∏ *–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏, –∞ –º—ã —Å–∞–º–∏ —Ä–∞—Å—á–∏—Ç–∞–µ–º –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å.*\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ - 10 —Ç–æ–∫–µ–Ω–æ–≤\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ - 5000 —Ç–æ–∫–µ–Ω–æ–≤\n\n",
                parse_mode="markdown", reply_markup=cancel_neg_markdown)
            await Form.amount_pay.set()
        elif call.data == "back_casino":
            items = get_items(call.from_user.id)
            if items[2] < 20:
                await call.message.edit_text(text="*–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É*",
                                             parse_mode='markdown')
            else:
                await call.message.edit_text(text=
                                             "üé∞ *–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∫–∞–∑–∏–Ω–æ*\n\n–í—ã –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã! –ù–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã)\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 —Ç–æ–∫–µ–Ω–æ–≤\n\n‚ùå *–ü—Ä–æ–∏–≥—Ä—ã—à - 80 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n\n‚úÖ –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤ 1,3—Ö - 19 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n\nüí∞ –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤ 4—Ö - 1 –ø—Ä–æ—Ü–µ–Ω—Ç*\n\n*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:*",
                                             parse_mode='markdown')
                await Form.casino.set()
        elif call.data == 'edit_res':
            save_data_in_database("pose_status", 0, call.from_user.id)
            dict_get = get_settings_get_txt2img(call.message.caption)
            items = get_items(call.from_user.id)
            rp2 = ReplyKeyboardMarkup(resize_keyboard=True)
            rp2_button = KeyboardButton(text="–°—Ç–∏–ª–∏", web_app=WebAppInfo(url='https://innoky.github.io/#'))
            button_1 = types.KeyboardButton(text="AlphaShare")
            rp2.add(button_1, rp2_button)
            await bot.send_message(call.from_user.id, f"*‚öôÔ∏è –ü—Ä–æ–º—Ç:* `{items[7]}`",
                                   disable_web_page_preview=True, reply_markup=rp2, parse_mode='markdown')

            await bot.send_message(call.from_user.id,
                                   replace_description_txt2img(model=dict_get['model'], resolution=dict_get['resol'],
                                                               prompt=dict_get['prompt'], negative=dict_get['negative'],
                                                               seed=dict_get['seed'], style=dict_get['style']),
                                   disable_web_page_preview=True, reply_markup=propmt_markup, parse_mode='markdown')
        elif call.data == 'cont_button':
            db = sqlite3.connect('userbase.db')
            c = db.cursor()
            c.execute(f"SELECT * FROM users")
            db.commit()
            items = c.fetchall()
            db.close()
            for i in range(len(items)):
                if str(items[i][0]) == str(call.from_user.id):
                    break
            msg = await call.message.edit_caption(caption="–ò—â–µ–º –∞—Ä—Ç—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø—è—Ç—å —Å–µ–∫—É–Ω–¥...")
            rch = random.choice(os.listdir("ashare"))
            i = 0
            while rch.split('rd')[0] == str(call.from_user.id) or rch == items[i][18]:
                rch = random.choice(os.listdir("ashare"))
                i += 1
                if i > 10:
                    break
                    await call.answer(text="–ü–æ—Ö–æ–∂–µ AlphaShare –ø—É—Å—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –≤—ã–ª–æ–∂–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
                                      show_alert=True)
            save_data_in_database("cur_alink", rch, call.from_user.id)
            gen_link = rch.split("rd")[1]
            ready_link = hlink("–°–∏–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", f"https://t.me/alphastabletbot?start={gen_link}")
            await bot.send_document(chat_id=call.from_user.id, document=open("ashare\\" + rch, "rb"),
                                    caption=f"<b>‚ú® –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</b>\n\nüå± <b>{ready_link}</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–Ω—É—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –¥–∞–ª–µ–µ</i>",
                                    reply_markup=alphashare_contin_markup, parse_mode="html")
            await msg.delete()
        elif call.data == 'ashare':
            document_id = call.message.document.file_name
            src = "outs" + f"\\{call.from_user.id}\\{document_id}"
            print(document_id)

            dst = f"ashare" + f"\\{document_id.replace('.png', '')}rd{random.randint(0, 9999999)}" + '.png'
            shutil.copyfile(src, dst)
            await call.answer(text="üì§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ AlphaShare!", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=write_history_to_art_markup_2)


@dp.message_handler(content_types=["photo"])
async def get_photo2img(message: types.Message):
    await message.photo[-1].download(destination_file=f'outs/{message.from_user.id}/{message.from_user.id}img2img.png')
    prompt = message.caption
    input_photo = InputFile(f"outs/{message.from_user.id}/{message.from_user.id}img2img.png")
    items = get_items(message.from_user.id)
    cur_model = items[5]
    cur_resol = f"{message.photo[-1].width}:{message.photo[-1].height}"
    if prompt is None:
        text = replace_description_img2img(model=cur_model, prompt="Prompt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å prompt,"
                                                                   " –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                                           strength="–•–ó",)
        await bot.send_photo(photo=input_photo, caption=text,
                             chat_id=message.chat.id, parse_mode="markdown")


@dp.message_handler(state=Form.qr_hidden_text)
async def amount_get(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        delete_msg = a['qr_text_id']

    if len(message.text) > 300:
        await message.answer(text="–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç", parse_mode='markdown')
    else:
        try:
            os.remove(f"outs/{message.from_user.id}/qr_hd_text_nr.jpg")
        except:
            print("–§–∞–π–ª —Å qr –æ—Ç—Å—É—Ç—Å–≤—É—Ç–µ—Ç")
        import qrcode
        # –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        data = message.text
        # –∏–º—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        filename = f"outs/{message.from_user.id}/qr_hd_text_nr.jpg"
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º qr-–∫–æ–¥
        img = qrcode.make(data)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º img –≤ —Ñ–∞–π–ª
        img.save(filename)
        #################
        image_path = f"outs/{message.from_user.id}/qr_hd_text_nr.jpg"

        img = Image.open(image_path)
        # –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        new_image = img.resize((1000, 1000))

        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        new_image.save(f"outs/{message.from_user.id}/qr_hd_text.jpg")

        await bot.delete_message(chat_id=message.from_user.id, message_id=delete_msg)
        items = get_items(message.from_user.id)

        cur_model = items[5]
        cur_resol = items[6]

        await bot.send_message(chat_id=message.chat.id, text=replace_description_txt2img(model=cur_model,
                                                                                         prompt=items[7],
                                                                                         resolution=cur_resol),
                               parse_mode='markdown',
                               reply_markup=propmt_markup, disable_web_page_preview=True)

        await message.answer(text="‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ QR –∫–æ–¥!*\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!",
                             parse_mode="markdown")
        save_data_in_database("pose_status", 3, message.from_user.id)
        await state.finish()


@dp.callback_query_handler(text_startswith='cancel_neg', state='*')
async def back_func(call: CallbackQuery, state: FSMContext):
    await state.finish()
    items = get_items(call.from_user.id)

    cur_model = items[5]
    cur_resol = items[6]

    text = link('–ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
    # await bot.send_photo(message.chat.id, photo="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
    #                      caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n\n`{message.text}`\n\n- {text}\n\n*–°–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT edit –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{cur_model}**\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: **{cur_resol}**""",
    #                      reply_to_message_id=message.message_id,
    #                      parse_mode='markdown', reply_markup=propmt_markup)
    await call.message.edit_text(text=replace_description_txt2img(model=cur_model,
                                                                  prompt=items[7],
                                                                  resolution=cur_resol),
                                 parse_mode='markdown',
                                 reply_markup=propmt_markup, disable_web_page_preview=True)


@dp.message_handler(state=Form.add_prompt)
async def amount_get(message: types.Message, state: FSMContext):
    new_prompt = message.text
    items = get_items(message.from_user.id)
    async with state.proxy() as data:
        id = data["edit_id"]
    if len(items[7]) + len(message.text) > 500:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"*–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø—Ä–æ–º—Ç*\n\n –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: *{500 - (len(items[7]))}*",
                               parse_mode="markdown")
    else:

        items = get_items(message.from_user.id)

        cur_model = items[5]
        cur_resol = items[6]

        save_data_in_database("raw_promt", items[7] + ", " + new_prompt, message.from_user.id)
        save_data_in_database("promt", items[7] + ", " + new_prompt, message.from_user.id)
        rp2 = ReplyKeyboardMarkup(resize_keyboard=True)
        rp2_button = KeyboardButton(text="–°—Ç–∏–ª–∏", web_app=WebAppInfo(url='https://innoky.github.io/#'))
        button_1 = types.KeyboardButton(text="AlphaShare")
        rp2.add(button_1, rp2_button)

        text = link('–ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
        # await bot.send_photo(message.chat.id, photo="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
        #                      caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n\n`{message.text}`\n\n- {text}\n\n*–°–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT edit –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{cur_model}**\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: **{cur_resol}**""",
        #                      reply_to_message_id=message.message_id,
        #                      parse_mode='markdown', reply_markup=propmt_markup)

        txt = replace_description_txt2img(model=cur_model,
                                          prompt=items[7] + ", " + message.text,
                                          resolution=cur_resol)
        mss = await bot.edit_message_text(chat_id=message.chat.id, message_id=id, text=txt, parse_mode='markdown',
                                          reply_markup=propmt_markup, disable_web_page_preview=True)
        save_data_in_database("last_msg_id", mss.message_id, message.from_user.id)
        save_data_in_database("cur_settings", txt, message.from_user.id)

        await state.finish()


@dp.message_handler(state=Form.gift_amount)
async def amount_get(message: types.Message, state: FSMContext):
    items = get_items(message.from_user.id)
    if message.text.isdigit():
        if int(message.text) < 500 and int(message.text) >= 1:
            if int(message.text) <= items[2] and int(message.text) > 25:
                db = sqlite3.connect('gift.db')
                c = db.cursor()

                alphabet = string.ascii_letters + string.digits
                link = ''.join(secrets.choice(alphabet) for i in range(20))
                param = (link, message.text, 0, message.from_user.id, "empty")
                print(param)
                c.execute(f"INSERT INTO gift VALUES (?, ?, ?, ?, ?)", param)
                db.commit()
                db.close()

                gift_link = f"https://t.me/sigma_stable_bot?start={link}rd{message.text}"

                send_gift_markup = InlineKeyboardMarkup(row_width=1)
                send_gift_button = InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", url=gift_link)
                send_gift_markup.add(send_gift_button)
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"üéÅ *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ–∫!*\n\n–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å—É–º–º—É –≤ *{message.text}* —Ç–æ–∫–µ–Ω(–æ–≤)",
                                       parse_mode="markdown", reply_markup=send_gift_markup)
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f"<i>*–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ —Ç–æ–º—É, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã</i>",
                                       parse_mode="html")

                await state.finish()
            else:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ –º–µ–Ω—å—à–µ ")
        else:
            await message.answer("–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫—É—é –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Å—É–º–º—É")
    else:
        await message.answer("–ü–æ—Ö–æ–∂–µ –≤—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.")


@dp.message_handler(state=Form.zoom_prompt)
async def zoom_set(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['zoom_prompt'] = message.text
    zprompt = a['zoom_prompt']
    if len(zprompt) > 300:
        await message.answer(text="–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç", parse_mode='markdown')
    else:
        msg = await bot.send_message(chat_id=message.from_user.id, text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º—Ç...")
        items = get_items(message.from_user.id)

        # translator = Translator(service_urls=['translate.googleapis.com'])
#
        # chat_response = (translator.translate(message.text, dest='en'))
        result_promt = message.text
        db = sqlite3.connect('userbase.db')
        c = db.cursor()
        c.execute(f"SELECT * FROM users")
        db.commit()
        items_gen = c.fetchall()
        db.close()
        sum_time = 1
        for i in range(len(items_gen)):
            sum_time = sum_time + int(items_gen[i][3])
        sum_time = str((sum_time * 15) - 15 + 35)

        ms = await bot.edit_message_text(chat_id=message.from_user.id, message_id=msg.message_id,
                                         text=f'<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å.</b> \n\n<i>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ~{sum_time} —Å–µ–∫—É–Ω–¥(—ã). –ë–æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢–∞–∫–∂–µ –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç, —Ç–∞–º –º—ã –¥–µ–ª–∏–º—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞–µ–º—Å—è</i>',
                                         parse_mode="html")
        save_data_in_database("edit_last", ms.message_id, message.from_user.id)
        print(result_promt)
        save_data_in_database('status', 1, message.from_user.id)
        if not (str(items[0]) in ("1430025958", "415356744")):
            save_data_in_database("balance", items[2] - 25, message.from_user.id)
        p1 = Process(target=zoom_start, args=(result_promt, message.from_user.id, items[10], items[24], items[23]))
        p1.start()
        await state.finish()


@dp.message_handler(state=Form.qr_text)
async def amount_get(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['qr_text'] = message.text
    qrt = a['qr_text']
    if len(qrt) > 300:
        await message.answer(text="–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç", parse_mode='markdown')
    else:
        import segno

        crop_to_square(f"outs/{message.from_user.id}/qr_input.jpg", f"outs/{message.from_user.id}/qr_inputsq.png")
        piet = segno.make(qrt, error='h', )
        piet.to_artistic(background=f"outs/{message.from_user.id}/qr_inputsq.png",
                         target=f"outs/{message.from_user.id}/qr_outputsq.png", scale=16)

        overlay_images(f"outs/{message.from_user.id}/qr_outputsq.png", f"outs/{message.from_user.id}/qr_input.jpg",
                       f"outs/{message.from_user.id}/qr_output.png")
        await bot.send_document(chat_id=message.from_user.id,
                                document=open(f'outs/{message.from_user.id}/qr_output.png', 'rb'),
                                caption=f"üî≤ *–í–∞—à QR-–∫–æ–¥ –≥–æ—Ç–æ–≤!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–≤–µ–¥–µ–Ω—ã–π –≤–∞–º–∏ —Ç–µ–∫—Å—Ç!",
                                parse_mode='markdown')
        await state.finish()


@dp.message_handler(state=Form.qr_image, content_types=['photo', 'text'])
async def get_img_qr(message: types.Message, state=FSMContext):
    if message.content_type == 'photo':
        user_id = message.from_user.id
        await message.photo[-1].download(destination_file=f'outs/{user_id}/qr_input.jpg')
        await message.delete()
        await message.answer(text="‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!*\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –µ–≥–æ –≤ QR-–∫–æ–¥:",
                             parse_mode="markdown")
        save_data_in_database('pose_status', 1, message.from_user.id)
        await state.finish()
        await Form.qr_text.set()

    else:
        await message.answer(text="*–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞*", parse_mode='markdown')
        await state.finish()


@dp.message_handler(state=Form.text, content_types=['photo', 'text'])
async def get_pose(message: types.Message, state=FSMContext):
    if message.content_type == 'photo':
        user_id = message.from_user.id
        await message.photo[-1].download(destination_file=f'outs/{user_id}/text.jpg')
        await message.delete()
        async with state.proxy() as data:
            delete_id = data['text_id']
        await bot.delete_message(chat_id=message.from_user.id, message_id=delete_id)
        items = get_items(message.from_user.id)

        cur_model = items[5]
        cur_resol = items[6]

        text = link('–ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
        # await bot.send_photo(message.chat.id, photo="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
        #                      caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n\n`{message.text}`\n\n- {text}\n\n*–°–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT edit –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{cur_model}**\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: **{cur_resol}**""",
        #                      reply_to_message_id=message.message_id,
        #                      parse_mode='markdown', reply_markup=propmt_markup)
        await bot.send_message(chat_id=message.chat.id, text=replace_description_txt2img(model=cur_model,
                                                                                         prompt=items[7],
                                                                                         resolution=cur_resol),
                               parse_mode='markdown',
                               reply_markup=propmt_markup, disable_web_page_preview=True)

        await message.answer(text="‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏!*\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!",
                             parse_mode="markdown")
        save_data_in_database('pose_status', 2, message.from_user.id)
        await state.finish()


    else:
        await message.answer(text="*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –Ω—É–∂–Ω—ã–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º*", parse_mode='markdown')


@dp.message_handler(state=Form.pose, content_types=['photo', 'text'])
async def get_pose(message: types.Message, state=FSMContext):
    if message.content_type == 'photo':
        user_id = message.from_user.id
        await message.photo[-1].download(destination_file=f'outs/{user_id}/pose.jpg')
        await message.delete()
        async with state.proxy() as data:
            delete_id = data['pose_id']
        await bot.delete_message(chat_id=message.from_user.id, message_id=delete_id)
        items = get_items(message.from_user.id)

        cur_model = items[5]
        cur_resol = items[6]

        text = link('–ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
        # await bot.send_photo(message.chat.id, photo="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
        #                      caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n\n`{message.text}`\n\n- {text}\n\n*–°–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT edit –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{cur_model}**\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: **{cur_resol}**""",
        #                      reply_to_message_id=message.message_id,
        #                      parse_mode='markdown', reply_markup=propmt_markup)
        await bot.send_message(chat_id=message.chat.id, text=replace_description_txt2img(model=cur_model,
                                                                                         prompt=items[7],
                                                                                         resolution=cur_resol),
                               parse_mode='markdown',
                               reply_markup=propmt_markup, disable_web_page_preview=True)

        await message.answer(text="‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å!*\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!",
                             parse_mode="markdown")
        save_data_in_database('pose_status', 1, message.from_user.id)
        await state.finish()


    else:
        await message.answer(text="*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –Ω—É–∂–Ω—ã–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º*", parse_mode='markdown')


@dp.message_handler(state=Form.casino)
async def amount_get(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['casino'] = message.text
    amount = a['casino'].replace(" ", "")
    if amount.isdigit():
        items = get_items(message.from_user.id)
        if int(amount) > 15 and int(amount) < int(items[2]):
            await message.answer(
                text=f"*üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {amount} —Ç–æ–∫–µ–Ω–æ–≤*\n\n–ò–≥—Ä–∞–µ–º?\n\n*–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–æ–º—Ç*",
                parse_mode='markdown', reply_markup=casino_markup)
            save_data_in_database("casino", int(amount), message.from_user.id)
            await state.finish()

        else:
            await message.answer(
                text=f"–ö–∞–∂–µ—Ç—Å—è –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Å—Ç–∞–≤–∫—É, –ª–∏–±–æ —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫—É—é —Å—Ç–∞–≤–∫—É")
    else:
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∑–Ω–∞–∫–æ–≤.")


@dp.message_handler(state=Form.amount_pay)
async def amount_get(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['amount_pay'] = message.text
    amount = a['amount_pay'].replace(" ", "")
    if amount.isdigit():
        if int(amount) > 9 and int(amount) < 5001:

            current_time = str(t.time()) + "spl" + str(round(int(amount) / 2))
            current_time_tobase = str(t.time()) + "spl" + str(round(int(amount)))
            save_data_in_database("pay_token", current_time_tobase, message.from_user.id)

            quickpay = Quickpay(
                receiver="4100118356657505",
                quickpay_form="shop",
                targets="Alpha tokens",
                paymentType="SB",
                sum=(round(int(amount) / 2)),
                label=str(message.from_user.id) + '::' + str(current_time_tobase)
            )
            pay_link = quickpay.redirected_url

            pay_link_markup = InlineKeyboardMarkup()
            pay_link_button = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=pay_link)
            pay_link_markup.row(pay_link_button).row(back_balance_button)

            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"*–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ {str(amount)} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ {str(round(int(amount) / 2))} —Ä—É–±–ª–µ–π*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                                   parse_mode='markdown', reply_markup=pay_link_markup)
            await state.finish()

        else:
            await message.answer(text="–ü–æ—Ö–æ–∂–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫—É—é —Å—É–º–º—É.")

    else:
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∑–Ω–∞–∫–æ–≤.")


@dp.message_handler(state=Form.negative_wait)
async def negative_get(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['negative_wait'] = message.text
    async with state.proxy() as data:
        neg_id = data['msg_id_neg']

    items = get_items(message.from_user.id)
    negative = a['negative_wait']
    if negative.lower() == "–Ω–µ—Ç":
        negative_m = ""
    else:
        translator = Translator(service_urls=['translate.googleapis.com'])

        chat_response = (translator.translate(negative, dest='en'))
        negative_m = chat_response.text

    s = get_settings_ready_txt2img(items[20])

    text_new = replace_description_txt2img(model=s["model"], prompt=s["prompt"], resolution=s["resol"],
                                           seed=s["seed"], style=s["style"], negative=negative_m)

    await bot.edit_message_text(chat_id=message.chat.id, message_id=neg_id.message_id, text=text_new,
                                parse_mode='markdown', reply_markup=propmt_markup,
                                disable_web_page_preview=True)
    text_m = text_new
    save_data_in_database("cur_settings", text_m, message.from_user.id)
    await state.finish()


@dp.message_handler(state=Form.seed_state)
async def seed_get(message: types.Message, state: FSMContext):
    async with state.proxy() as a:
        a['seed_wait'] = message.text
    items = get_items(message.from_user.id)
    seed = a['seed_wait']
    async with state.proxy() as data:
        seed_id = data['seed_id']

    if not seed.isdigit() and seed != "-1":
        await bot.send_message(message.chat.id,
                               text="–î–∞–Ω–Ω—ã–π –≤–≤–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    else:
        s = get_settings_ready_txt2img(items[20])
        text_new = replace_description_txt2img(model=s["model"], prompt=s["prompt"], resolution=s["resol"],
                                               seed=int(seed), style=s["style"], negative=s["negative"])

        await bot.edit_message_text(chat_id=message.chat.id, message_id=seed_id, text=text_new, parse_mode='markdown',
                                    reply_markup=propmt_markup,
                                    disable_web_page_preview=True)
        text_m = text_new
        save_data_in_database("cur_settings", text_m, message.from_user.id)
        await state.finish()


@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def web_app_data_recieve(message: Message, state: FSMContext):
    style = json.loads(open("model_json/style.json", encoding="utf-8").read())
    print(message.web_app_data.data)

    data_key = "1"
    if (message.web_app_data.data).isdigit():
        if message.web_app_data.data == "1":
            data_key = "1990s"
        elif message.web_app_data.data == "2":
            data_key = "magazine"
        elif message.web_app_data.data == "3":
            data_key = "pop figure"
        elif message.web_app_data.data == "4":
            data_key = "invisible"
        elif message.web_app_data.data == "5":
            data_key = "ragenew"
        elif message.web_app_data.data == "6":
            data_key = "body horror"
        elif message.web_app_data.data == "7":
            data_key = "pixel"
        elif message.web_app_data.data == "8":
            data_key = "3drm"
        elif message.web_app_data.data == "9":
            data_key = "manga"
        elif message.web_app_data.data == "10":
            data_key = "niji"
        elif message.web_app_data.data == "11":
            data_key = "concept"
        elif message.web_app_data.data == "12":
            data_key = "pastel"
        elif message.web_app_data.data == "13":
            data_key = "poster"
        elif message.web_app_data.data == "14":
            data_key = "shapes"

        items = get_items(message.from_user.id)
        settings_dict = get_settings_ready_txt2img(items[20])
        resol_m = settings_dict["resol"]
        model_m = settings_dict["model"]
        style_m = settings_dict["style"]
        prompt_m = settings_dict["prompt"]
        try:
            negative_m = settings_dict["negative"]
        except:
            print("–ø—É—Å—Ç–æ–π –Ω–µ–≥–∞—Ç–∏–≤")
        try:
            seed_m = settings_dict['seed']
        except:
            print("–ü—É—Å—Ç–æ–π —Å–∏–¥")

        if data_key in style.keys():
            items = get_items(message.from_user.id)
            save_data_in_database("promt", items[7] + f", {data_key} ", message.from_user.id)
            items = get_items(message.from_user.id)

            await bot.edit_message_text(chat_id=message.from_user.id, message_id=items[25],
                                        text=replace_description_txt2img(items[5], items[6], items[7], negative_m,
                                                                         seed_m, style_m),
                                        disable_web_page_preview=True, reply_markup=propmt_markup,
                                        parse_mode='markdown')
    else:
        save_data_in_database('pose_status', 0, message.from_user.id)
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        items = get_items(message.from_user.id)

        cur_model = items[5]
        cur_resol = items[6]

        save_data_in_database("raw_promt", message.web_app_data.data, message.from_user.id)
        save_data_in_database("promt", message.web_app_data.data, message.from_user.id)
        rp2 = ReplyKeyboardMarkup(resize_keyboard=True)
        rp2_button = KeyboardButton(text="–°—Ç–∏–ª–∏", web_app=WebAppInfo(url='https://innoky.github.io/#'))
        button_1 = types.KeyboardButton(text="AlphaShare")
        rp2.add(button_1, rp2_button)

        text = link('–ø–æ–¥—Å–∫–∞–∑–∫–∏', 'https://telegra.ph/AlphaStable-Tutorial-06-10')
        # await bot.send_photo(message.chat.id, photo="https://i.ibb.co/KVv7rvH/914029246rd-659.png",
        #                      caption=f"""‚ò∫Ô∏è*–ú—ã –≥–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:*\n\n`{message.text}`\n\n- {text}\n\n*–°–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT edit –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{cur_model}**\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: **{cur_resol}**""",
        #                      reply_to_message_id=message.message_id,
        #                      parse_mode='markdown', reply_markup=propmt_markup)
        ms = await bot.send_message(chat_id=message.from_user.id, text=f"‚úèÔ∏è *–í—ã –≤–≤–µ–ª–∏:* `{message.web_app_data.data}`",
                                    reply_markup=rp2, parse_mode='markdown')
        txt = replace_description_txt2img(model=cur_model,
                                          prompt=message.web_app_data.data,
                                          resolution=cur_resol)
        mss = await bot.send_message(message.chat.id, text=txt,
                                     reply_to_message_id=message.message_id, parse_mode='markdown',
                                     reply_markup=propmt_markup, disable_web_page_preview=True)
        save_data_in_database("last_msg_id", mss.message_id, message.from_user.id)
        save_data_in_database("cur_settings", txt, message.from_user.id)


@dp.inline_handler()
async def inline_handler(query: types.InlineQuery):
    print(query.query)
    if len(query.query.split(" ")) == 2:
        db = sqlite3.connect('userbase.db')
        c = db.cursor()
        c.execute("SELECT username FROM users")
        items = c.fetchall()
        existence = bool
        getter = "empty"
        for i in range(len(items)):
            if str(items[i]).replace("('", "").replace("',)", "") == query.query.split(" ")[1]:
                getter = items[i]
                break

        if getter != "empty":
            items = get_items(query.from_user.id)

            if int(query.query.split(" ")[0]) < items[2] and int(query.query.split(" ")[0]) <= 500 and int(
                    query.query.split(" ")[0]) >= 25:
                db = sqlite3.connect('gift.db')
                c = db.cursor()

                alphabet = string.ascii_letters + string.digits
                link = ''.join(secrets.choice(alphabet) for i in range(20))
                param = (link, query.query.split(' ')[0], 0, query.from_user.id,
                         str(getter).replace("('", "").replace("',)", ""))
                print(param)
                c.execute(f"INSERT INTO gift VALUES (?, ?, ?, ?, ?)", param)
                db.commit()
                db.close()

                gift_link = f"https://t.me/alphastabletbot?start={link}rd{query.query.split(' ')[0]}"

                send_gift_markup = InlineKeyboardMarkup(row_width=1)
                send_gift_button = InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", url=gift_link)
                send_gift_markup.add(send_gift_button)
                getter2 = str(getter).replace("('", "").replace("',)", "")
                articles = [types.InlineQueryResultArticle(
                    id=random.randint(1, 1000),
                    title=f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å—É–º–º—É –≤ {query.query.split(' ')[0]} —Ç–æ–∫–µ–Ω(–æ–≤) –¥–ª—è @{getter2}",
                    reply_markup=send_gift_markup,
                    thumb_url="https://creazilla-store.fra1.digitaloceanspaces.com/emojis/46882/wrapped-gift-emoji-clipart-md.png",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å—É–º–º—É –≤ {query.query.split(' ')[0]} —Ç–æ–∫–µ–Ω(–æ–≤) –¥–ª—è @{getter2}"))]

                await query.answer(articles, cache_time=1, is_personal=True)

        # if query.query.split(" ")[2]
    elif query.query.isdigit():
        items = get_items(query.from_user.id)

        if int(query.query) < items[2] and int(query.query) <= 500 and int(query.query) >= 25:
            db = sqlite3.connect('gift.db')
            c = db.cursor()

            alphabet = string.ascii_letters + string.digits
            link = ''.join(secrets.choice(alphabet) for i in range(20))
            param = (link, query.query, 0, query.from_user.id, "empty")
            print(param)
            c.execute(f"INSERT INTO gift VALUES (?, ?, ?, ?, ?)", param)
            db.commit()
            db.close()

            gift_link = f"https://t.me/alphastabletbot?start={link}rd{query.query}"

            send_gift_markup = InlineKeyboardMarkup(row_width=1)
            send_gift_button = InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", url=gift_link)
            send_gift_markup.add(send_gift_button)

            articles = [types.InlineQueryResultArticle(
                id=random.randint(1, 1000),
                title=f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å—É–º–º—É –≤ {query.query} —Ç–æ–∫–µ–Ω(–æ–≤)",
                reply_markup=send_gift_markup,
                thumb_url="https://creazilla-store.fra1.digitaloceanspaces.com/emojis/46882/wrapped-gift-emoji-clipart-md.png",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å—É–º–º—É –≤ {query.query} —Ç–æ–∫–µ–Ω(–æ–≤)"))]

            await query.answer(articles, cache_time=1, is_personal=True)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
